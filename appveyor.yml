configuration:
  - release

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      GENERATOR: "NMake Makefiles JOM"
      VCVARSALL: "%VS140COMNTOOLS%/../../VC/vcvarsall.bat"
      PLATFORM:  x64

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015  # used as mingw
      GENERATOR: "MinGW Makefiles"
      CC:        C:/Qt/Tools/mingw530_32/bin/gcc.exe
      CXX:       C:/Qt/Tools/mingw530_32/bin/g++.exe

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      GENERATOR: ""

install:
- git submodule -q update --init --recursive
# Vulkan SDK and thirdparty
- cmd: curl -L --silent --show-error --output VulkanSDK.exe https://vulkan.lunarg.com/sdk/download/1.2.135.0/windows/VulkanSDK-1.2.135.0-Installer.exe?Human=true
- cmd: VulkanSDK.exe /S
- cmd: set VK_SDK_PATH=C:/VulkanSDK/1.2.135.0

- sh:  sudo apt-get update
- sh:  sudo apt-get --yes install libvulkan-dev libasound2-dev
- sh:  wget -O vulkansdk-linux-x86_64-1.2.135.0.tar.gz https://vulkan.lunarg.com/sdk/download/1.2.135.0/linux/vulkansdk-linux-x86_64-1.2.135.0.tar.gz?Human=true
- sh:  mkdir VulkanSDK
- sh:  tar -xzf vulkansdk-linux-x86_64-1.2.135.0.tar.gz -C ./VulkanSDK
- sh:  export VK_SDK_PATH=$APPVEYOR_BUILD_FOLDER/VulkanSDK/1.2.135.0/x86_64

# GLSL compiller
- mkdir glslang
- cd glslang
- cmd: curl -fsSL -o glslang-master-windows-x64-Release.zip https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-windows-x64-Release.zip
- sh:  curl -fsSL -o glslang-master-linux-Release.zip https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-linux-Release.zip
- cmd: 7z x glslang-master-windows-x64-Release.zip
- sh:  7z x glslang-master-linux-Release.zip
- cd ..
- cmd: "SET PATH=%APPVEYOR_BUILD_FOLDER%\\glslang\\bin;%PATH%"
- sh: export PATH="$PATH:$APPVEYOR_BUILD_FOLDER/glslang/bin"

before_build:
  # Prepare the out-of-source build directory.
  - mkdir build
  - cmd: if "%GENERATOR%" == "MinGW Makefiles"     set Path=C:/Qt/Tools/mingw530_32/bin;%Path%
  - cmd: if "%GENERATOR%" == "NMake Makefiles JOM" set PATH=C:\Qt\Tools\QtCreator\bin;%PATH%

build_script:
  - cmake --version
  - cmd: if "%GENERATOR%" == "MinGW Makefiles" gcc --version
  - cmd: if "%GENERATOR%" == "MinGW Makefiles" g++ --version

  - cmd: if NOT "%VCVARSALL%" == "" call "%VCVARSALL%" %PLATFORM%
  - cmd: cmake -H. -Bbuild -G "%GENERATOR%" -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DCMAKE_SH=CMAKE_SH-NOTFOUND
  - sh:  cmake -H. -Bbuild                  -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo
  - cmake --build ./build

after_build:
  # generate version string
  - cd build
  - cd opengothic
  - cmd: echo gothic-win32-v%appveyor_build_version% >> VERSION
  - sh:  echo gothic-linux-v%appveyor_build_version% >> VERSION
  - cmd: copy /b/y "C:\Qt\Tools\mingw530_32\bin\libgcc_s_dw2-1.dll"   "libgcc_s_dw2-1.dll"
  - cmd: copy /b/y "C:\Qt\Tools\mingw530_32\bin\libstdc++-6.dll"      "libstdc++-6.dll"
  - cmd: copy /b/y "C:\Qt\Tools\mingw530_32\bin\libwinpthread-1.dll"  "libwinpthread-1.dll"
  # zip the results
  - cmd: set name="opengothic_win.zip"
  - cmd: 7z a %name%    VERSION
  - cmd: 7z a %name% -r "*.exe"
  - cmd: 7z a %name% -r "*.dll"
  - cmd: 7z a %name% -r "*.bat"
  - sh:  export name="opengothic_linux.zip"
  - sh:  7z a $name     VERSION
  - sh:  7z a $name     "*"
  - sh:  7z a $name     "*"
  - sh:  7z a $name     "Gothic2Notr.sh"

artifacts:
  - path: build/opengothic/opengothic_win.zip
    name: archive

deploy:
  release: gothic-win32-v$(appveyor_build_version)
  description: 'no release description'
  provider: GitHub
  auth_token:
    secure: YLdtUMsAcc8FUr3kgwhQW7nkl5jDpLKbelvzWzzTWUfAiDd92Kd15rjlDJVEEFzo
  artifact: archive
  draft: true
  force_update: true
  prerelease: true
  on:
    branch: master                # release from master branch only
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015 # mingw is default for now
    appveyor_repo_tag: true       # deploy on tag push only
