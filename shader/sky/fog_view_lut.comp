#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "sky_common.glsl"
#include "scene.glsl"

layout(binding = 0) uniform sampler2D tLUT;
layout(binding = 1) uniform sampler2D mLUT;
layout(binding = 2) uniform sampler2D cloudsLUT;
#ifdef COMPUTE
layout(binding = 3) uniform sampler2D textureSm1;
layout(binding = 4) uniform writeonly image3D fogLut;
layout(binding = 5, std140) uniform UboScene {
  SceneDesc scene;
  };
#endif

layout(local_size_x = 8, local_size_y = 8) in;

void store(ivec3 at, vec3 lum, vec3 trans) {
  const float t = (trans.x+trans.y+trans.z)/3.0;
  imageStore(fogLut, at, vec4(lum,t));
  }

vec4 shadowSample(in sampler2D shadowMap, vec2 shPos) {
  shPos.xy = shPos.xy*vec2(0.5,0.5)+vec2(0.5);
  return textureGather(shadowMap,shPos);
  }

float shadowResolve(in vec4 sh, float z) {
  z  = clamp(z,0,0.99);
  sh = step(sh,vec4(z));
  return 0.25*(sh.x+sh.y+sh.z+sh.w);
  }

float calcShadow(vec3 shPos1) {
  //shPos1.y = max(0,shPos1.y);
  vec4  lay1 = shadowSample(textureSm1,shPos1.xy);
  float v1   = shadowResolve(lay1,shPos1.z);
  return v1;
  }

float shadowFactor(vec4 shPos) {
  if(abs(shPos.x)>=shPos.w && abs(shPos.y)>=shPos.w)
    return 1;
  return calcShadow(shPos.xyz/shPos.w);
  }

float shadowFactorMS(vec4 shPos0, vec4 shPos1, int maxStep) {
  float ret  = 0;
  for(int i=0; i<maxStep; ++i) {
    vec4 shPos = mix(shPos0,shPos1,float(i+0.5)/float(maxStep));
    ret += calcShadow(shPos.xyz/shPos.w);
    }
  return ret/float(maxStep);
  }

vec3 project(mat4 m, vec3 pos) {
  vec4 p = m*vec4(pos,1);
  return p.xyz/p.w;
  }

float tStep(int i, int steps) {
  float t = float(i+0.3)/steps;
  return t;
  }

vec4 raymarchScattering(vec3 pos, vec3 rayDir, vec3 sunDir, float tMax, int numScatteringSteps) {
  const float cosTheta      = dot(rayDir, sunDir);
  const float phaseMie      = miePhase(cosTheta);
  const float phaseRayleigh = rayleighPhase(-cosTheta);
  const float clouds        = textureLod(cloudsLUT, vec2(scene.isNight,0), 0).a;

  vec3  scatteredLight = vec3(0.0);
  vec3  transmittance  = vec3(1.0);

  for(int i=0; i<numScatteringSteps; ++i) {
    float t      = (float(i+0.3)/numScatteringSteps)*tMax;
    float dt     = tMax/numScatteringSteps;
    vec3  newPos = pos + t*rayDir;

    vec3  rayleighScattering;
    float mieScattering;
    vec3  extinction;
    scatteringValues(newPos, clouds, rayleighScattering, mieScattering, extinction);

    vec3 transmittanceSmp = exp(-dt*extinction);
    vec3 transmittanceSun = textureLUT(tLUT, newPos, sunDir);
    vec3 psiMS            = textureLUT(mLUT, newPos, sunDir);

    vec3 scatteringSmp = vec3(0);
    scatteringSmp += psiMS * (rayleighScattering + mieScattering);
    scatteringSmp += rayleighScattering * phaseRayleigh * transmittanceSun;
    scatteringSmp += mieScattering      * phaseMie      * transmittanceSun;

    // Integrated scattering within path segment.
    vec3 scatteringIntegral = (scatteringSmp - scatteringSmp * transmittanceSmp) / extinction;

    scatteredLight += scatteringIntegral*transmittance;
    transmittance  *= transmittanceSmp;

    store(ivec3(gl_GlobalInvocationID.xy,i), scatteredLight, transmittance);
    }

  const float t = (transmittance.x+transmittance.y+transmittance.z)/3.0;
  return vec4(scatteredLight, t);
  }

void main() {
  const ivec3 dstSz = imageSize(fogLut);
  const ivec2 dstUV = ivec2(gl_GlobalInvocationID.xy);
  if(dstUV.x>=dstSz.x || dstUV.y>=dstSz.y)
    return;

  const int   numScatteringSteps = dstSz.z;
  vec3        viewOrigin         = vec3(0.0, RPlanet + push.plPosY, 0.0);
  const float viewDistanceScale  = 50;

  const vec2  inPos      = ((vec2(dstUV)+vec2(0.5))/vec2(dstSz.xy))*2.0-vec2(1.0);
  const float dMin       = 0;
  const float dMax       = 0.9999;
  const vec3  pos0       = project(scene.viewProjectInv, vec3(inPos,dMin));
  const vec3  pos1       = project(scene.viewProjectInv, vec3(inPos,dMax));

  const vec3  viewPos    = viewOrigin + pos0*0.01;
  const vec3  rayDir     = normalize(pos1 - pos0);
  const vec3  sunDir     = scene.sunDir;

  //const float planetDist = rayIntersect(viewPos, rayDir, RPlanet);
  const float atmoDist   = rayIntersect(viewPos, rayDir, RAtmos);
  const float groundDist = length(pos1-pos0)*0.01;  // meters
  const float tMax       = min(atmoDist, groundDist*viewDistanceScale);

  raymarchScattering(viewPos, rayDir, sunDir, tMax, numScatteringSteps);
  }
