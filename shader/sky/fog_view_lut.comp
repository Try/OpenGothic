#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "sky_common.glsl"

layout(binding = 0) uniform sampler2D tLUT;
layout(binding = 1) uniform sampler2D mLUT;
#ifdef COMPUTE
layout(binding = 2) uniform sampler2D textureSm1;
layout(binding = 3) uniform writeonly image3D fogLut;
layout(binding = 4, std140) uniform UboScene {
  vec3  sunDir;
  // float padd0;
  mat4  viewProject;
  mat4  viewProjectInv;
  mat4  viewShadow[2];
  vec3  ambient;
  vec4  sunCl;
  vec4  frustrum[6];
  vec3  clipInfo;
  // float padd1;
  vec3  camPos;
  // float padd2;
  vec2  screenResInv;
  } scene;
#endif

#ifdef COMPUTE
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(location = 0) in  vec2 inPos;
layout(location = 0) out vec4 outColor;
#endif

void store(ivec3 at, vec3 lum, vec3 trans) {
  const float t = (trans.x+trans.y+trans.z)/3.0;
#ifdef COMPUTE
  imageStore(fogLut, at, vec4(lum,t));
#else
  outColor = vec4(lum,t);
#endif
  }

#ifdef COMPUTE
vec4 shadowSample(in sampler2D shadowMap, vec2 shPos) {
  shPos.xy = shPos.xy*vec2(0.5,0.5)+vec2(0.5);
  return textureGather(shadowMap,shPos);
  }

float shadowResolve(in vec4 sh, float z) {
  z  = clamp(z,0,0.99);
  sh = step(sh,vec4(z));
  return 0.25*(sh.x+sh.y+sh.z+sh.w);
  }

float calcShadow(vec3 shPos1) {
  //shPos1.y = max(0,shPos1.y);
  vec4  lay1 = shadowSample(textureSm1,shPos1.xy);
  float v1   = shadowResolve(lay1,shPos1.z);
  if(abs(shPos1.x)<1.0 && abs(shPos1.y)<1.0)
    return v1;
  return 1.0;
  }
#endif

float shadowFactor(vec4 shPos) {
#ifdef COMPUTE
  return calcShadow(shPos.xyz/shPos.w);
#else
  return 1.0;
#endif
  }

float shadowFactorMS(vec4 shPos0, vec4 shPos1, int maxStep) {
#ifdef COMPUTE
  float ret  = 0;
  for(int i=0; i<maxStep; ++i) {
    vec4 shPos = mix(shPos0,shPos1,float(i+0.5)/float(maxStep));
    ret += calcShadow(shPos.xyz/shPos.w);
    }
  return ret/float(maxStep);
#else
  return 1.0;
#endif
  }

vec3 project(mat4 m, vec3 pos) {
  vec4 p = m*vec4(pos,1);
  return p.xyz/p.w;
  }

float tStep(int i, int steps) {
  float t = float(i+0.3)/steps;
  return t;
  }

#ifdef COMPUTE
void preintegrateShadowOld(out float shadowS[128], vec3 pos0, vec3 pos1) {
  const vec4  shPos0    = scene.viewShadow[1]*vec4(pos0,  1);
  const vec4  shPos1    = scene.viewShadow[1]*vec4(pos1,  1);

  const int steps       = imageSize(fogLut).z;

  const int msCount     = 4;
  const int shadowSteps = steps*msCount;
  const int shadowFirst = 1   *msCount;
  const int shadowLast  = 16  *msCount;

  for(int i=0; i<steps; ++i)
    shadowS[i] = 1;
  for(int i=shadowFirst; i<shadowLast; ++i)
    shadowS[i] = 0;
  for(int i=shadowFirst; i<shadowLast; ++i) {
    const float t = tStep(i, shadowSteps);
    shadowS[i/msCount] += shadowFactor(mix(shPos0,shPos1,t))/float(msCount);
    }
  }

void preintegrateShadow(out float shadowS[128], vec3 pos0, vec3 pos1) {
  const vec4  shPos0    = scene.viewShadow[1]*vec4(pos0,  1);
  const vec4  shPos1    = scene.viewShadow[1]*vec4(pos1,  1);

  const int steps       = imageSize(fogLut).z;
  const int shadowSteps = 32*4;

  float shadowC[128];
  for(int i=0; i<steps; ++i) {
    shadowS[i] = 0;
    shadowC[i] = 0;
    }

  //const vec4  shDir4 = (shPos1-shPos0);
  //const vec4  shDir  = normalize(shDir4);
  //const vec4  shDir  = (shDir4)/length(shDir4.xyz);

  for(int i=0; i<shadowSteps; ++i) {
    const float t  = tStep(i, shadowSteps);
    //const float tt = t;//*t*t;
    const float tt = mix(0,0.5,t); // fine tuned

    vec4  shPos = mix(shPos0, shPos1, tt);

    int   id    = int(tt*steps);
    shadowS[id] += shadowFactor(shPos);
    shadowC[id] += 1.0;
    }

  for(int i=0; i<16; ++i) {
    const float t  = tStep(i, shadowSteps);
    const float tt = mix(0, 1.0/32.0, t); // fine tuned

    vec4  shPos = mix(shPos0, shPos1, tt);

    int   id    = int(tt*steps);
    shadowS[id] += shadowFactor(shPos);
    shadowC[id] += 1.0;
    }

  float prev = 1.0;
  for(int i=steps; i>0; ) {
    --i;
    if(shadowC[i]>0.0) {
      prev = shadowS[i]/float(shadowC[i]);
      shadowS[i] = prev;
      } else {
      shadowS[i] = prev;
      }
    }
  }
#endif

void main() {
#ifdef COMPUTE
  const ivec3 dstSz = imageSize(fogLut);
  const ivec3 dstUV = ivec3(gl_GlobalInvocationID.xy,0);
  if(dstUV.x>=dstSz.x || dstUV.y>=dstSz.y)
    return;
  const vec2  inPos  = ((vec2(dstUV.xy)+vec2(0.5))/vec2(dstSz.xy))*2.0-vec2(1.0);
  const int   steps  = dstSz.z;
#else
  const ivec3 dstUV  = ivec3(gl_FragCoord.xy,0);
  const int   steps  = 64;
#endif

#ifdef COMPUTE
  float dMin = 0;
  float dMax = 0.9999;
  const vec3  pos0     = project(scene.viewProjectInv, vec3(inPos,dMin));
  const vec3  pos1     = project(scene.viewProjectInv, vec3(inPos,dMax));
  const vec4  shPos0   = scene.viewShadow[1]*vec4(pos0, 1);
  const vec4  shPos1   = scene.viewShadow[1]*vec4(pos1, 1);
#else
  float dMin = 0;
  float dMax = 1;
  const vec3  pos0     = project(push.viewProjectInv,  vec3(inPos,dMin));
  const vec3  pos1     = project(push.viewProjectInv,  vec3(inPos,dMax));
#endif

  const vec3  ray      = pos1.xyz - pos0.xyz;
  const float dist     = length(ray)*0.01; // meters
  const vec3  dir      = normalize(ray);

  const vec3  sunDir             = vec3(push.sunDir);
  const float cosTheta           = dot(dir, sunDir);
  const float miePhaseValue      = miePhase(cosTheta);
  const float rayleighPhaseValue = rayleighPhase(-cosTheta);

#ifdef COMPUTE
  vec3  pos                 = pos0*0.01 + vec3(0,RPlanet,0);
  vec3  sunTransmittance0   = textureLUT(tLUT, pos, sunDir);
  vec3  psiMS0              = textureLUT(mLUT, pos, sunDir);
#endif

  vec3  scatteredLight = vec3(0.0);
  vec3  transmittance  = vec3(1.0);

  store(ivec3(dstUV.xy,0), scatteredLight, transmittance);
  for(int i=1; i<steps; ++i) {
    float t      = tStep(i,  steps);
    float tPrev  = tStep(i-1,steps);
    float dd     = (t - tPrev)*dist;

    vec3  pos    = mix(pos0,pos1,t)*0.01 + vec3(0,RPlanet,0);

    vec3  rayleighScattering;
    vec3  extinction;
    float mieScattering;
    scatteringValues(pos, rayleighScattering, mieScattering, extinction);

    vec3  sampleTransmittance = exp(-dd*extinction);

#ifdef COMPUTE
    int   samplecount         = max(20-i/2,1);
    float shadow              = shadowFactorMS(mix(shPos0,shPos1,tPrev),
                                               mix(shPos0,shPos1,t),
                                               samplecount);
    vec3  sunTransmittance    = sunTransmittance0 * shadow;
    vec3  psiMS               = psiMS0 * (shadow*0.7 + 0.3);
#else
    vec3  sunTransmittance    = textureLUT(tLUT, pos, sunDir);
    vec3  psiMS               = textureLUT(mLUT, pos, sunDir);
#endif

    vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);
    vec3 mieInScattering      = mieScattering     *(miePhaseValue     *sunTransmittance + psiMS);
    vec3 inScattering         = (rayleighInScattering + mieInScattering);

    // Integrated scattering within path segment.
    // See slide 28 at http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/
    vec3  scatteringIntegral  = (inScattering - inScattering * sampleTransmittance) / extinction;

    transmittance  *= sampleTransmittance;
    scatteredLight += scatteringIntegral*transmittance;

    store(ivec3(dstUV.xy,i), scatteredLight, transmittance);
    }
  }
