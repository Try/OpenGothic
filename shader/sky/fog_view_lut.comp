#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "sky_common.glsl"
#include "scene.glsl"

layout(binding = 0, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 1) uniform sampler2D tLUT;
layout(binding = 2) uniform sampler2D mLUT;
layout(binding = 3) uniform sampler2D cloudsLUT;
layout(binding = 4) uniform writeonly image3D fogLut;
#if defined(SEPARABLE)
layout(binding = 5) uniform writeonly image3D fogLutMs;
#endif

layout(local_size_x = 8, local_size_y = 8) in;

#if defined(SEPARABLE)
void store(ivec3 at, vec3 lum, vec3 ms, vec3 trans) {
  const float t = (trans.x+trans.y+trans.z)/3.0;
  imageStore(fogLut,   at, vec4(lum,t));
  imageStore(fogLutMs, at, vec4(ms, t));
  }
#else
void store(ivec3 at, vec3 lum, vec3 trans) {
  const float t = (trans.x+trans.y+trans.z)/3.0;
  imageStore(fogLut, at, vec4(lum,t));
  }
#endif

vec3 project(mat4 m, vec3 pos) {
  vec4 p = m*vec4(pos,1);
  return p.xyz/p.w;
  }

float tStep(int i, int steps) {
  float t = float(i+0.3)/steps;
  return t;
  }

void raymarchScattering(vec3 pos, vec3 rayDir, vec3 sunDir, float tMax, int numScatteringSteps) {
  const float cosTheta      = dot(rayDir, sunDir);
  const float phaseMie      = miePhase(cosTheta);
  const float phaseRayleigh = rayleighPhase(-cosTheta);
  const float clouds        = textureLod(cloudsLUT, vec2(scene.isNight,0), 0).a;

  vec3  transmittance   = vec3(1.0);
#if defined(SEPARABLE)
  vec3  scatteredMs     = vec3(0.0);
  vec3  scatteredDir    = vec3(0.0);
#else
  vec3  scatteredLight  = vec3(0.0);
#endif

  for(int i=0; i<numScatteringSteps; ++i) {
    float t      = (float(i+0.3)/numScatteringSteps)*tMax;
    float dt     = tMax/numScatteringSteps;
    vec3  newPos = pos + t*rayDir;

    const ScatteringValues sc = scatteringValues(newPos, clouds);

    vec3 transmittanceSmp = exp(-dt*sc.extinction);
    vec3 transmittanceSun = textureLUT(tLUT, newPos, sunDir);
    vec3 psiMS            = textureLUT(mLUT, newPos, sunDir);

    vec3 smpMS         = vec3(0);
    vec3 smpDir        = vec3(0);
#if defined(MULTI_SCATTERING)
    smpMS = psiMS * (sc.rayleighScattering + sc.mieScattering);
#endif
#if defined(SUN_SCATTERING)
    smpDir += sc.rayleighScattering * phaseRayleigh * transmittanceSun;
    smpDir += sc.mieScattering      * phaseMie      * transmittanceSun;
#endif

#if !defined(SEPARABLE)
    vec3 scatteringSmp = smpDir + smpMS;
#endif

    // Integrated scattering within path segment.
#if defined(SEPARABLE)
    vec3 msIntegral  = (smpMS  - smpMS  * transmittanceSmp) / sc.extinction;
    vec3 dirIntegral = (smpDir - smpDir * transmittanceSmp) / sc.extinction;

    scatteredMs  += msIntegral  *transmittance;
    scatteredDir += dirIntegral *transmittance;
#else
    vec3 scatteringIntegral = (scatteringSmp - scatteringSmp * transmittanceSmp) / sc.extinction;
    scatteredLight += scatteringIntegral*transmittance;
#endif

    transmittance  *= transmittanceSmp;

#if defined(SEPARABLE)
    store(ivec3(gl_GlobalInvocationID.xy,i), scatteredDir, scatteredMs, transmittance);
#else
    store(ivec3(gl_GlobalInvocationID.xy,i), scatteredLight, transmittance);
#endif
    }
  }

void main() {
  const ivec3 dstSz = imageSize(fogLut);
  const ivec2 dstUV = ivec2(gl_GlobalInvocationID.xy);
  if(dstUV.x>=dstSz.x || dstUV.y>=dstSz.y)
    return;

  const int   numScatteringSteps = dstSz.z;
  vec3        viewOrigin         = vec3(0.0, RPlanet + scene.plPosY, 0.0);
  const float viewDistanceScale  = 50;

  const vec2  inPos      = ((vec2(dstUV)+vec2(0.5))/vec2(dstSz.xy))*2.0-vec2(1.0);
  const float dMin       = 0;
  const float dMax       = 0.9999;
  const vec3  pos0       = project(scene.viewProjectInv, vec3(inPos,dMin));
  const vec3  pos1       = project(scene.viewProjectInv, vec3(inPos,dMax));

  const vec3  viewPos    = viewOrigin + pos0*0.01;
  const vec3  rayDir     = normalize(pos1 - pos0);
  const vec3  sunDir     = scene.sunDir;

  //const float planetDist = rayIntersect(viewPos, rayDir, RPlanet);
  const float atmoDist   = rayIntersect(viewPos, rayDir, RAtmos);
  const float groundDist = length(pos1-pos0)*0.01;  // meters
  const float tMax       = min(atmoDist, groundDist*viewDistanceScale);

  raymarchScattering(viewPos, rayDir, sunDir, tMax, numScatteringSteps);
  }
