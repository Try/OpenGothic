#version 460

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "lighting/rt/probe_common.glsl"
// #include "lighting/rt/rt_common.glsl"
#include "lighting/tonemapping.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 64) in;

const  uint samplesCount = 4;
const  uint samplesTotal = gl_WorkGroupSize.x*samplesCount;

shared vec4 samples[gl_WorkGroupSize.x][3][2]; // 6 Kb
shared uint shProbeId;

layout(binding = 0, std140) readonly buffer UboScene { // ubo is broken on NVidia?
  SceneDesc scene;
  };
layout(binding = 1) uniform writeonly image2D probesLighting;
layout(binding = 2) uniform sampler2D gbufferDiff;
layout(binding = 3) uniform sampler2D gbufferNorm;
layout(binding = 4) uniform sampler2D gbufferRayT;

layout(binding = 5) uniform sampler2D skyLUT;
layout(binding = 6) uniform sampler2D textureSm1;
layout(binding = 7) uniform sampler2D probesLightingPrev;

layout(binding = 8, std430) buffer Hbo { uint hashTable[]; };
layout(binding = 9, std430) buffer Pbo { ProbesHeader probeHeader; Probe probe[]; };

float shadowResolve(in vec4 sh, float z) {
  z  = clamp(z,0,0.99);
  sh = step(sh,vec4(z));
  return 0.25*(sh.x+sh.y+sh.z+sh.w);
  }

vec4 shadowSample(in sampler2D shadowMap, vec2 shPos) {
  shPos.xy = shPos.xy*vec2(0.5,0.5)+vec2(0.5);
  return textureGather(shadowMap,shPos);
  }

float calcShadow(vec3 shPos1) {
  //shPos1.y = max(0,shPos1.y);
  vec4  lay1 = shadowSample(textureSm1,shPos1.xy);
  float v1   = shadowResolve(lay1,shPos1.z);
  return v1;
  }

float shadowFactor(vec4 shPos) {
  if(abs(shPos.x)>=shPos.w && abs(shPos.y)>=shPos.w)
    return 1;
  return calcShadow(shPos.xyz/shPos.w);
  }

void storeSample(vec3 dir, vec4 val) {
  if(val.a==0)
    return;

  for(int i=0; i<3; ++i) {
    float v = dir[i];
    int   d = v>=0 ? 1 : 0;
    v = abs(v);
    samples[gl_LocalInvocationIndex][i][d] += vec4(val.rgb*v, 1);
    }
  }

vec3 resolveHit(const vec3 rayOrigin, const vec3 rayDirection, float rayT, vec3 normal, bool opaque, float shMap) {
  float dt = dot(normal, scene.sunDir);
  if(!opaque) {
    // atificial lit on vegetation, as RT can't capture small bright light leaks from the trees
    // dt = dt*0.5 + 0.5;
    dt = abs(dt);
    }

  const float lambert     = max(0, dt); //max(opaque ? 0 : 0.2, dt);
  const float shadow      = max(0, shMap);
  const vec3  illuminance = scene.sunColor * lambert * shadow;

  return illuminance;
  }

vec3 resolveMiss(const vec3 rayOrigin, const vec3 rayDirection) {
  // PERF: need to preload sky lut early in shader
  return textureSkyLUT(skyLUT, vec3(0,RPlanet,0), rayDirection, scene.sunDir) * scene.GSunIntensity;
  }

vec3 resolveSecondBounce(vec3 pos, vec3 norm, float rayT, uint selfProbeId) {
#if 0
  return scene.ambient;
#elif 1
  float k       = smoothstep(0.0, 25.0, rayT);
  vec3  ambient = scene.ambient;
  vec3  sky     = probeReadAmbient(probesLightingPrev, 0, norm, vec3(0,1,0));
  return (ambient + sky)*0.5*k;
#elif 0
  vec3 ambient = scene.ambient;
  // vec3 sky     = skyIrradiance();
  // vec3 sky     = resolveMiss(pos, -norm);
  vec3 sky     = probeReadAmbient(probesLightingPrev, 0, norm, vec3(0,1,0));
  return mix(ambient, sky, max(0, norm.y*0.8));
#elif 0
  return resolveMiss(pos, -norm);
#else
  // doesn't look coherent yet - need to keep offscreen data for long term
  const ivec3 gridPos = ivec3(round(pos/(probeGridStep*1)));
  const uint  h       = probeGridPosHash(gridPos) % hashTable.length();
  uint        probeId = hashTable[h];

  [[loop]]
  for(int i=0; i<8; ++i) {
    if(probeId>=probeHeader.count) {
      break;
      }
    const Probe p = probe[probeId];
    if((p.bits & TRACED_BIT)==0) {
      probeId = p.pNext;
      continue;
      }

    //return vec3(1000, 0,0);
    return probeReadAmbient(probesLightingPrev, probeId, norm, p.normal);
    }

  // probeId = selfProbeId;
  // return vec3(0.01,0,0)*scene.GSunIntensity;
  // return scene.ambient;
  return resolveMiss(pos, -norm);
  // return vec3(0);
#endif
  }

vec4 processSample(const vec3 rayOrigin, const vec3 rayDirection, uint probeId, uint sampleId) {
  const ivec2 uv     = gbufferCoord(probeId, sampleId);
  const vec4  diff   = texelFetch(gbufferDiff, uv, 0);
  const vec4  nr     = texelFetch(gbufferNorm, uv, 0);
  const float rt     = texelFetch(gbufferRayT, uv, 0).r;
  const uint  bits   = uint(diff.a*255.0+0.5);
  const bool  sky    = (bits & 0x4)!=0;
  const bool  badbit = (bits & 0x2)!=0;

  if(sky) {
    vec3 hit = resolveMiss(rayOrigin, rayDirection);
    // if(badbit)
    //   hit *= 0.001;
    return vec4(hit, badbit ? 0 : 1);
    }
#if 0
  {
  vec3 hit = resolveMiss(rayOrigin, rayDirection);
  return vec4(hit, badbit ? 0 : 1);
  }
#endif

  const bool opaque  = (bits & 0x1)!=0;
  const bool semiSky = (bits & 0x8)!=0;

  const vec3  albedo  = textureAlbedo(diff.rgb);
  const vec3  norm    = normalize(nr.xyz*2.0-vec3(1));

  const float rayT    = rt * probeRayDistance;
  const vec3  pos     = rayOrigin + rayT*rayDirection;

  // TODO: rt-shadow lighting ?
  vec4  shCoord = scene.viewShadow[1]*vec4(pos,1);
  float shadow  = shadowFactor(shCoord);

  vec3 hit = vec3(0);
  hit += albedo * Fd_Lambert * resolveHit(rayOrigin, rayDirection, rayT, norm, opaque, shadow);
  hit += albedo * resolveSecondBounce(pos, norm, rayT, probeId); // Fd_Lambert is accounted in probe

  if(semiSky) {
    // avoid pitch-black lighting in forrest
    hit = (hit*0.25 + resolveMiss(rayOrigin, rayDirection)*0.75);
    //hit = vec3(1,0,0)*scene.GSunIntensity;
    }

  if(badbit) {
    // hit = vec3(1,0,0)*scene.GSunIntensity; //0.01;
    // hit *= 0.5;
    }

  return vec4(hit, 1);
  }

void processLighting(const uint probeId) {
  const vec3 origin = probe[probeId].pos;

  for(uint i=0; i<samplesCount; ++i) {
    uint sampleId = gl_LocalInvocationIndex*samplesCount+i;
    vec3 dir      = sampleSphere(sampleId, samplesTotal, 0);
    vec4 clr      = processSample(origin, dir, probeId, sampleId);
    storeSample(dir, clr);
    }
  }

void processProbe(const uint probeId) {
  const uint laneId = gl_LocalInvocationIndex;

  const bool traced = ((probe[probeId].bits & TRACED_BIT)!=0);
  const bool skip   = ((probe[probeId].bits & UNUSED_BIT)!=0);

  if(skip)
    return;

  for(int i=0; i<3; ++i) {
    samples[laneId][i][0] = vec4(0);
    samples[laneId][i][1] = vec4(0);
    }
  barrier();

  processLighting(probeId);
  barrier();

  for(uint i=gl_WorkGroupSize.x; i>0;) {
    i /= 2;
    if(laneId<i) {
      for(int r=0; r<3; ++r) {
        samples[laneId][r][0] += samples[laneId+i][r][0];
        samples[laneId][r][1] += samples[laneId+i][r][1];
        }
      }
    barrier();
    }

  if(laneId<3) {
    vec4 a = samples[0][laneId][0];
    vec4 b = samples[0][laneId][1];

    if(a.w>0)
      a.rgb /= a.w;
    if(b.w>0)
      b.rgb /= b.w;

    // Need to mul by 2, because it's uniform sampling; https://www.rorydriscoll.com/2009/01/07/better-sampling/
    const ivec2 uv  = lightBufferCoord(probeId);
    imageStore(probesLighting, uv+ivec2(laneId,0), a * 2.0);
    imageStore(probesLighting, uv+ivec2(laneId,1), b * 2.0);
    }
  }

void main() {
  while(true) {
    if(gl_LocalInvocationIndex==0)
      shProbeId = atomicAdd(probeHeader.iterator2, 1);
    barrier();
    const uint probeId = shProbeId;
    if(probeId>=probeHeader.count)
      return;
    processProbe(probeId);
    barrier();
    }
  }
