#version 450

#extension GL_EXT_control_flow_attributes       : enable
#extension GL_GOOGLE_include_directive          : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 128) in;

layout(push_constant, std430) uniform UboPush {
  float baseL;
  float sunOcclusion;
  } push;
layout(binding = 0, std140) buffer UboScene {
  SceneDesc scene;
  };
layout(binding = 1) uniform sampler2D skyLUT;
layout(binding = 2) uniform sampler2D tLUT;
layout(binding = 3) uniform sampler2D cloudsLUT;
layout(binding = 4) uniform texture2D irradiance;

const uint NumInvocations = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;
const uint HistMid        = (NumInvocations/2);

shared uint histogram[NumInvocations];

void hInsert(float v) {
  uint value = floatBitsToUint(v);
  for(uint i=0; i<=HistMid; ++i){
    uint old = atomicMin(histogram[i], value);
    if(old == 0xFFFFFFFFu || old == value)
      break;
    value = max(old, value);
    }
  }

float luminosity(vec3 color) {
  return dot(color, vec3(0.2125, 0.7154, 0.0721));
  }

void processValue(vec3 val) {
  float lx = luminosity(val);
  hInsert(lx);
  }

vec3 resolveMiss(const vec3 rayOrigin, const vec3 rayDirection) {
  // PERF: need to preload sky lut early in shader
  const vec3 lcolor  = textureSkyLUT(skyLUT, vec3(0,RPlanet,0), rayDirection, scene.sunDir);
  const vec3 ambient = scene.ambient;

  vec3 color = vec3(0);
  color += lcolor;
  return color;
  }

void gather() {
  const uint smpCount = 8;

  for(uint i=0; i<smpCount; ++i) {
    vec3 dir = sampleHemisphere(gl_LocalInvocationIndex*smpCount+i, gl_WorkGroupSize.x*smpCount, 0);

    vec3 sky = vec3(0);
    sky = resolveMiss(vec3(0), +dir);
    processValue(sky);

    //sky = resolveMiss(vec3(0), -dir);
    //processValue(sky);
    }
  }

// 5.5.2. LUT parameterization
vec3 textureLUT(sampler2D tex, vec3 pos, vec3 sunDir) {
  float height   = length(pos);
  vec3  up       = pos / height;
  float cosAngle = dot(sunDir, up);

  vec2 uv;
  uv.x = 0.5 + 0.5*cosAngle;
  uv.y = (height - RPlanet)/(RAtmos - RPlanet);
  return texture(tex, uv).rgb;
  }

vec3 skyIrradiance() {
#if 0
  return vec3(0.0005);
#else
  vec3 ret = vec3(0);
  ret += texelFetch(irradiance, ivec2(2,1), 0).rgb;
  return ret;
#endif
  }

void main() {
  histogram[gl_LocalInvocationIndex] = -1;
  barrier();

  gather();
  barrier();

  if(gl_LocalInvocationIndex==0) {
    float vmin = uintBitsToFloat(histogram[HistMid-1]);
    float vmax = uintBitsToFloat(histogram[HistMid-0]);

    const vec3  pos      = vec3(0, RPlanet+1, 0);
    const vec3  tr       = textureLUT(tLUT, pos, scene.sunDir).rgb;
    const float cldVal   = textureLod(cloudsLUT, vec2(scene.isNight,0), 0).a;
    const float clouds   = (1.0 - pow(cldVal, 4));

    const vec3  NightAmbient = vec3(0.05);
    const vec3  sunColor     = scene.sunColor * tr;
    const vec3  ambient      = scene.ambient  * tr + NightAmbient;

    const vec3  light  = sunColor*Fd_Lambert + ambient + skyIrradiance();
    const float objLum = dot(light, vec3(0.2125, 0.7154, 0.0721));
    const float skyLum = (vmax+vmin) * 0.5 * scene.GSunIntensity;

    const float lum    = max(objLum*3.1, skyLum*25.0);

    // float lum = tr.b;
    scene.sunColor     = sunColor * clouds * push.sunOcclusion;
    scene.ambient      = ambient  * clouds;
    scene.exposure     = 1.0 / max(lum+push.baseL, 0.0000005);
    //scene.exposure     = 1.0 / max(6400, 0.0000005);
    scene.luminanceMed = lum;
    }
  }
