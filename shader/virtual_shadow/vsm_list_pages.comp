#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "virtual_shadow/vsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, std430) buffer Pages { VsmHeader header; uint  pageList[]; } vsm;
layout(binding = 1, r32ui)  uniform uimage3D pageTbl;
layout(binding = 2, std430) buffer Omni  { uint pageTblOmni[]; };
layout(binding = 3, std430) buffer PTmp  { uint size; uint  pageList[]; } vsmTmp;

layout(binding = 4, r32ui)  uniform uimage2D dbg;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

shared uint pageListPrefix;
shared uint pageOmni;
shared uint bits[(NumThreads+31)/32];

ivec2 loadPageSize(ivec3 at) {
  uint a = imageLoad(pageTbl, at).r;
  a = a >> 1;
  return ivec2(a, a >> 4) & 0xF;
  }

uint bitCountShared(uint till) {
  uint n = till/32;
  uint f = till%32;
  uint r = 0;
  for(uint i=0; i<n; ++i)
    r += bitCount(bits[i]);
  r += bitCount(bits[n] & ((1u << f)-1u));
  return r;
  }

void listPages(uint mip) {
  if(vsm.header.pagePerMip[mip]==0)
    return;

  const ivec3 size = imageSize(pageTbl);
  const uint  lane = gl_LocalInvocationIndex;
  const ivec3 at   = ivec3(gl_LocalInvocationID.xy, mip);

  if(lane < bits.length())
    bits[lane] = 0;
  barrier();

  const ivec2 sz = loadPageSize(at);
  if(sz.x>0)
    atomicOr(bits[lane/32], 1u<<(lane%32));
  barrier();

  if(sz.x>0) {
    const uint id = pageListPrefix + bitCountShared(lane);
    vsm.pageList[id] = packVsmPageInfo(at, sz);
    }
  // barrier(); //NOTE: very slow on mac
  }

void listOmni() {
  const uint lane = gl_LocalInvocationIndex;

  const uint NumSteps = (pageTblOmni.length()+NumThreads-1)/NumThreads;
  for(uint id=0; id<NumSteps; ++id) {
    const uint i      = id*NumThreads + lane;
    const uint prefix = pageListPrefix + pageOmni;
    if(lane<bits.length())
      bits[lane] = 0;
    barrier();

    const uint pageHit = i<pageTblOmni.length() ? pageTblOmni[i] : 0;
    if(pageHit!=0)
      atomicOr(bits[lane/32], 1u<<(lane%32));
    barrier();

    if(pageHit!=0) {
      const uint id = prefix + bitCountShared(lane);
      const uint sz = pageHit;
      vsm.pageList[id] = packVsmPageInfo(i/6, i%6, ivec2(0), ivec2(sz));
      atomicAdd(pageOmni, 1);
      }
    barrier();
    }

  vsm.header.pageOmniCount = pageOmni;
  vsm.header.pageCount     = pageListPrefix + pageOmni;
  }

void main() {
  const uint lane = gl_LocalInvocationIndex;
  const uint mip  = gl_WorkGroupID.x;

  pageListPrefix = 0;
  pageOmni       = 0;
  barrier();

  if(lane<mip && lane<VSM_PAGE_MIPS)
    atomicAdd(pageListPrefix, vsm.header.pagePerMip[lane]);
  barrier();

  if(mip<VSM_PAGE_MIPS) {
    listPages(mip);
    return;
    }
  listOmni();
  }
