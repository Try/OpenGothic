#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "virtual_shadow/vsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, std430) buffer Pages { VsmHeader header; uint  pageList[]; } vsm;
layout(binding = 1, r32ui)  uniform uimage3D pageTbl;
layout(binding = 2, std430) buffer Omni  { uint pageTblOmni[]; };
layout(binding = 3, std430) buffer PTmp  { uint size; uint  pageList[]; } vsmTmp;

layout(binding = 4, r32ui)  uniform uimage2D dbg;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

shared uint pageListSize;
shared uint pageList[VSM_MAX_PAGES];

void provokingPage(uint lane) {
  const uint  row = lane/VSM_PAGE_TBL_SIZE;
  const uint  col = lane%VSM_PAGE_TBL_SIZE;
  const uint  p   = vsm.pageList[lane];
  const bool  om  = vsmPageIsOmni(p);
  const uint  sz  = unpackVsmPageSize(p).y;
  const ivec3 at  = unpackVsmPageInfo(p);
  if(sz<=0 || om)
    return;

  if(col==0) {
    uint id = atomicAdd(pageListSize, 1);
    pageList[id] = lane;
    return;
    }

  if(col<sz.x)
    return;
  //return;

  const uint  p1  = vsm.pageList[lane-sz.x];
  const bool  om1 = vsmPageIsOmni(p1);
  const uint  sz1 = unpackVsmPageSize(p1).y;
  const ivec3 at1 = unpackVsmPageInfo(p1);

  if(sz==sz1 && at1+ivec3(sz,0,0)==at && !om1)
    return;

  uint id = atomicAdd(pageListSize, 1);
  pageList[id] = lane;
  }

void main() {
  const uint lane = gl_LocalInvocationIndex;
  // return;

  pageListSize = 0;
  barrier();

  // provoking pages
  if(lane < vsm.header.pageCount)
    provokingPage(lane);
  barrier();

  atomicExchange(vsm.header.counterM, pageListSize);
  if(lane < pageListSize) {
    //uint id = pageList[lane];
    //vsm.pageList[id] = 0;
    }

  if(lane >= pageListSize)
    return;

  uint  pId = pageList[lane];
  const uint  row = pId/VSM_PAGE_TBL_SIZE;
  const uint  col = pId%VSM_PAGE_TBL_SIZE;
  const uint  p0  = vsm.pageList[pId];
  const uint  off = row*VSM_PAGE_TBL_SIZE;

  uvec2 sz   = unpackVsmPageSize(p0);
  ivec3 at   = unpackVsmPageInfo(p0);
  uint  size = sz.x;
  for(uint i=col+sz.x; i<VSM_PAGE_TBL_SIZE; i+=sz.x) {
    const uint  pId1 = off+i;
    const uint  p1   = vsm.pageList[pId1];
    const bool  om1  = vsmPageIsOmni(p1);
    const uvec2 sz1  = unpackVsmPageSize(p1);
    const ivec3 at1  = unpackVsmPageInfo(p1);
    if(sz.y!=sz1.y || at+uvec3(size,0,0)!=at1 || om1)
      break;
    if(size+sz.x>=16) {
      // restart stripe
      vsm.pageList[pId] = packVsmPageInfo(at, ivec2(size, sz.y));
      pId  = pId1;
      sz   = sz1;
      at   = at1;
      size = sz1.x;
      continue;
      }
    vsm.pageList[pId1] = 0;
    size += sz.x;
    }
  vsm.pageList[pId] = packVsmPageInfo(at, ivec2(size, sz.y));
  }
