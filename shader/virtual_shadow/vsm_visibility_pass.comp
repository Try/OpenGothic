#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#include "scene.glsl"
#include "common.glsl"
#include "virtual_shadow/vsm_common.glsl"

//NOTE: need to sort pages per mip upfront, to reduce pulling cost
layout(local_size_x = 1024) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  int meshletCount;
  } push;
layout(binding = 0, std140) uniform UboScene    { SceneDesc   scene;         };
layout(binding = 1, std430) buffer Payload      { uvec4       payload[];     };
layout(binding = 2, std430) readonly buffer Mem { uint        instanceMem[]; };
layout(binding = 3, std140) readonly buffer Bbo { Bucket      bucket[];      };
layout(binding = 4, std430) buffer IndirectBuf  { IndirectCmd cmd[];         };
layout(binding = 5, std430) readonly buffer Cbo { Cluster     clusters[];    };
layout(binding = 6, std430) readonly buffer Lbo { LightSource lights[];      };

layout(binding = 7, r32ui)  uniform uimage3D pageTblDepth;
layout(binding = 8, std430) buffer Pages        { VsmHeader   header; uint  pageList[]; } vsm;

layout(binding = 9, r32ui)  uniform uimage2D dbg;

shared uint pageListSize;
shared uint pageList[VSM_MAX_PAGES];

shared uint vsmMipMask;

shared uint anyPageGlob;

Instance pullInstance(uint i) {
  i *= 16;
  Instance ret;
  ret.mat[0][0] = uintBitsToFloat(instanceMem[i+0]);
  ret.mat[0][1] = uintBitsToFloat(instanceMem[i+1]);
  ret.mat[0][2] = uintBitsToFloat(instanceMem[i+2]);
  ret.mat[1][0] = uintBitsToFloat(instanceMem[i+3]);
  ret.mat[1][1] = uintBitsToFloat(instanceMem[i+4]);
  ret.mat[1][2] = uintBitsToFloat(instanceMem[i+5]);
  ret.mat[2][0] = uintBitsToFloat(instanceMem[i+6]);
  ret.mat[2][1] = uintBitsToFloat(instanceMem[i+7]);
  ret.mat[2][2] = uintBitsToFloat(instanceMem[i+8]);
  ret.mat[3][0] = uintBitsToFloat(instanceMem[i+9]);
  ret.mat[3][1] = uintBitsToFloat(instanceMem[i+10]);
  ret.mat[3][2] = uintBitsToFloat(instanceMem[i+11]);
  ret.fatness   = uintBitsToFloat(instanceMem[i+12]);
  ret.animPtr   = instanceMem[i+13];
  return ret;
  }

bool frustrumTest(const vec4 sphere) {
  if(sphere.w<0.f)
    return false;

  for(int i=0; i<6; ++i) {
    if(dot(vec4(sphere.xyz,1.0), scene.frustrum[i]) <= -sphere.w) {
      return false;
      }
    }

  return true;
  }

bool projectSphere(const vec4 sphere, out vec4 aabb, out float depthMax) {
  const vec3  c = (scene.viewProject * vec4(sphere.xyz, 1)).xyz;
  const float R = sphere.w;

  const float smWidthInv = 1.0/(1024.0); // NOTE: from camera.cpp
  const float zScale     = 1.0/(10*5120.0);

  float Rz = R * zScale;
  if(c.z - Rz > 1 || c.z + Rz < 0)
    return false;

  float Rx = R * smWidthInv;
  float Ry = R * smWidthInv;
  aabb     = vec4(c.xy-vec2(Rx,Ry), c.xy+vec2(Rx,Ry));
  depthMax = c.z + Rz;
  // aabb = c.xyxy;
  return true;
  }

bool projectInstance(const Cluster cluster, out vec4 aabb, out float depthMax) {
  const uint  bId        = cluster.bucketId_commandId >> 16;
  const uint  instanceId = cluster.instanceId;

  const vec3  b[2]       = {bucket[bId].bbox[0].xyz, bucket[bId].bbox[1].xyz};
  Instance    obj        = pullInstance(instanceId);

  aabb     = vec4(1, 1, -1, -1);
  depthMax = 0;
  for(uint i=0; i<8; ++i) {
    const vec3 pos = vec3(b[bitfieldExtract(i,0,1)].x,
                          b[bitfieldExtract(i,1,1)].y,
                          b[bitfieldExtract(i,2,1)].z);
    vec4 trPos = vec4(pos,1.0);
    trPos = vec4(obj.mat*trPos, 1.0);
    trPos = scene.viewProject*trPos;

    vec3 bp = trPos.xyz / trPos.w;
    aabb.xy  = min(aabb.xy,  bp.xy);
    aabb.zw  = max(aabb.zw,  bp.xy);
    depthMax = max(depthMax, bp.z);
    }
  return true;
  }

bool projectCluster(const Cluster cluster, out vec4 aabb, out float depthMax) {
  if(cluster.instanceId==0xFFFFFFFF)
    return projectSphere(cluster.sphere, aabb, depthMax);
  return projectSphere(cluster.sphere, aabb, depthMax);
  // return projectInstance(cluster, aabb, depthMax);
  }

bool emitCluster(const Cluster cluster, uint page) {
  const uint at = atomicAdd(vsm.header.meshletCount, cluster.meshletCount);
  if(at+cluster.meshletCount > 1000000)
    return false;
  for(int i=0; i<cluster.meshletCount; ++i)
    payload[at+i] = uvec4(cluster.instanceId, cluster.firstMeshlet+i, cluster.bucketId_commandId, page);

  const uint commandId = cluster.bucketId_commandId & 0xFFFF;
  atomicAdd(cmd[commandId].instanceCount, cluster.meshletCount);
  return true;
  }


void makeMipMask(const vec4 aabb0) {
  vsmMipMask = 0;
  barrier();

  const uint lane = gl_LocalInvocationIndex;
  for(uint i=lane; i<vsm.header.pageBbox.length(); i+=NumThreads) {
    ivec4 bbox = vsm.header.pageBbox[i];
    ivec2 sz   = bbox.zw-bbox.xy;

    vec4  aabb = aabb0/(1u << i);
    aabb = (aabb*0.5+0.5); // [0..1]
    aabb = (aabb*VSM_PAGE_TBL_SIZE - bbox.xyxy);

    if(aabb.z < 0 || sz.x <= aabb.x)
      continue;
    if(aabb.w < 0 || sz.y <= aabb.y)
      continue;
    const float dx = (aabb.z-aabb.x)*VSM_PAGE_SIZE;
    const float dy = (aabb.w-aabb.y)*VSM_PAGE_SIZE;
    if(dx<1 || dy<1)
      continue; // subpixel sized meshlet
    atomicOr(vsmMipMask, 1u<<i);
    }
  barrier();
  }

void pullPages(uint mip) {
  pageListSize = 0;
  barrier();

  const uint lane      = gl_LocalInvocationIndex;
  const uint pageCount = vsm.header.pageCount;

  for(uint i=lane; i<pageCount; i+=NumThreads) {
    const uint data = vsm.pageList[i];
    if(data==0 || vsmPageIsOmni(data))
      continue;
    const ivec3 page = unpackVsmPageInfo(data);
    const ivec2 sz   = unpackVsmPageSize(data);
    if(page.z!=mip)
      continue;
    if(sz==ivec2(0))
      continue;

    const uint id = atomicAdd(pageListSize, 1);
    pageList[id] = i;
    }
  barrier();
  }

void pullPagesOmni() {
  pageListSize = 0;
  barrier();

  const uint lane      = gl_LocalInvocationIndex;
  const uint pageCount = vsm.header.pageCount;

  for(uint i=lane; i<pageCount; i+=NumThreads) {
    const uint data = vsm.pageList[i];
    if(data==0 || !vsmPageIsOmni(data))
      continue;
    const ivec2 sz = unpackVsmPageSize(data);
    if(sz==ivec2(0))
      continue;

    const uint id = atomicAdd(pageListSize, 1);
    pageList[id] = i;
    }
  barrier();
  }

bool pageBoundsTest(in vec4 aabb, const ivec3 page, const ivec2 sz) {
  aabb -= page.xyxy;
  if(aabb.z < 0 || sz.x <= aabb.x)
    return false;
  if(aabb.w < 0 || sz.y <= aabb.y)
    return false;
  const float dx  = (aabb.z-aabb.x)*VSM_PAGE_SIZE;
  const float dy  = (aabb.w-aabb.y)*VSM_PAGE_SIZE;
  if(dx<1 || dy<1)
    return false; // subpixel sized meshlet

  //HACK: should be 1px, but that will require too much gpu work
  // should be removed eventually with, maybe better, culling
  const float pix = 32;
  if(dx<pix || dy<pix)
    return false; // small sized meshlet
  return true;
  }

bool pageHiZTest(ivec4 iaabb, float depthMax, const ivec3 at, const ivec2 sz) {
  iaabb.xy = max(iaabb.xy, ivec2(at.xy));
  iaabb.zw = min(iaabb.zw, ivec2(at.xy+sz));

  for(int x=iaabb.x; x<iaabb.z; ++x)
    for(int y=iaabb.y; y<iaabb.w; ++y) {
      const uint  p = imageLoad(pageTblDepth, ivec3(x,y,at.z)).x;
      const float f = uintBitsToFloat(p);

      // if(p!=0xFFFFFFFF)
      //   return true;
      if(f<=depthMax)
        return true;
      }

  return false;
  }

void runCluster(const uint clusterId, const uint mip) {
  const Cluster cluster = clusters[clusterId];
  if(cluster.sphere.w<=0.f)
    return; // disabled or deleted

  if(frustrumTest(cluster.sphere)) {
    if(gl_GlobalInvocationID.y==0)
      atomicAdd(vsm.header.counterV, cluster.meshletCount);
    } else {
    // return;
    }

  vec4  aabb     = vec4(0);
  float depthMax = 1;
  if(!projectCluster(cluster, aabb, depthMax))
    return;

  aabb /= (1u << mip);
  aabb = aabb*0.5+0.5; // [0..1]
  aabb = aabb*VSM_PAGE_TBL_SIZE;

  ivec4 iaabb = ivec4(ivec2(aabb.xy), ivec2(aabb.zw)+1);
  iaabb.xy = max(iaabb.xy, ivec2(0));
  iaabb.zw = min(iaabb.zw, ivec2(VSM_PAGE_TBL_SIZE));

  for(uint ix=0; ix<pageListSize; ++ix) {
    const uint  i    = pageList[ix];
    const uint  data = vsm.pageList[i];

    const ivec3 page = unpackVsmPageInfo(data);
    const ivec2 sz   = unpackVsmPageSize(data);
    // if(!(3<=page.z && page.z<=6))
    //   ;//continue;

    if(!pageBoundsTest(aabb, page, sz))
      continue;
    if(!pageHiZTest(iaabb, depthMax, page, sz))
      continue;
    // atomicAdd(vsm.header.counterV, cluster.meshletCount);

    // imageAtomicAdd(dbg, ivec2(page.z,0), cluster.meshletCount);
#if 0
    if(unpackVsmPageId(i)==ivec2(56,4))
      continue;
    if(unpackVsmPageId(i)==ivec2(32,4))
      continue;
    if(unpackVsmPageId(i)==ivec2(24,4))
      ;//continue;
    if(unpackVsmPageId(i)==ivec2(44,4))
      continue;
#endif

    if(!emitCluster(cluster, i))
      break;
    }
  }


bool frustrumOmniTest(vec3 pos, float r) {
  const vec3  plane[] = {vec3(0,-1,1),  vec3(0,+1,1), vec3(-1,0,1), vec3(+1,0,1)};
  const float scale   = 1.41421356237; //sqrt(2);

  [[unroll]]
  for(int i=0; i<4; ++i) {
    if(dot(pos, plane[i]) < -r*scale)
      return false;
    }
  return true;
  }

void runClusterOmni(const uint clusterId) {
  const Cluster cluster = clusters[clusterId];
  if(cluster.sphere.w<=0.f)
    return; // disabled or deleted

  for(uint ix=0; ix<pageListSize; ++ix) {
    const uint  i    = pageList[ix];
    const uint  data = vsm.pageList[i];

    const uvec2       page = unpackLightId(data);
    const LightSource lx   = lights[page.x];
    const uint        face = page.y;
    // const ivec2       sz   = unpackVsmPageSize(data);

    const vec3  dvec = cluster.sphere.xyz - lx.pos;
    const float r    = cluster.sphere.w   + lx.range;

    if(dot(dvec,dvec) > r*r)
      continue;

    const vec3 pos  = vsmMapDirToFace(dvec, face);
    if(!frustrumOmniTest(pos, cluster.sphere.w))
      continue;

    // imageAtomicAdd(dbg, ivec2(0,1), cluster.meshletCount);
    // imageAtomicAdd(dbg, ivec2(page.x%64,1+page.x/64), cluster.meshletCount);
    if(!emitCluster(cluster, i))
      break;
    }
  }

void mainSunLight(uint mip) {
  pullPages(mip);
  if(pageListSize==0)
    return;

  const uint clusterId = gl_GlobalInvocationID.x;
  if(clusterId<push.meshletCount)
    runCluster(clusterId, mip);
  }

void mainOmniLights() {
  pullPagesOmni();
  if(pageListSize==0)
    return;

  const uint clusterId = gl_GlobalInvocationID.x;
  if(clusterId<push.meshletCount)
    runClusterOmni(clusterId);
  }

void main() {
  if(gl_GlobalInvocationID.y==VSM_PAGE_MIPS) {
    mainOmniLights();
    return;
    }
  mainSunLight(gl_GlobalInvocationID.y);
  }
