#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#extension GL_EXT_mesh_shader : require

#include "../scalar_ops.glsl"

#define MESH
#include "materials_common.glsl"
#include "vertex_process.glsl"

layout(local_size_x = WORKGROUP_SIZE) in;
layout(triangles, max_vertices = MaxVert, max_primitives = MaxPrim) out;

taskPayloadSharedEXT Payload payload;

out gl_MeshPerVertexEXT {
  vec4 gl_Position;
  } gl_MeshVerticesEXT[];

#if defined(MAT_VARYINGS)
layout(location = 0) out Varyings shOut[];  // [max_vertices]
#endif

#if DEBUG_DRAW
layout(location = DEBUG_DRAW_LOC) out flat uint debugId[];
#endif

bool sphereTest(const uint objId, const uint meshletId) {
  const uint laneID = gl_LocalInvocationID.x;
#if (MESH_TYPE==T_LANDSCAPE)
  const vec4 sphere = bounds[meshletId];
#elif (MESH_TYPE==T_PFX)
  const vec4 sphere = vec4(0);
#else
  const vec4 sphere = vec4(matrix[objId][3].xyz,bucket.bboxRadius);
#endif
  bool invisible = (sphere.w<0.f);
  if(laneID<6 && dot(vec4(sphere.xyz,1.0), scene.frustrum[laneID]) <= -sphere.w) {
    invisible = true;
    }
  invisible = workgroupAny(invisible);
  return !invisible;
  }

#if !defined(SHADOW_MAP) && (MESH_TYPE!=T_PFX)
shared ivec2 ibboxShared[2];
shared uint  depthMin;
shared uint  bboxVisible;
bool bboxTest(const uint objId) {
  const uint laneID = gl_LocalInvocationID.x;

  ivec2 hiZsize  = textureSize(hiZ,0);
  ibboxShared[0] = ivec2(hiZsize);
  ibboxShared[1] = ivec2(0);
  depthMin       = floatBitsToUint(1);
  bboxVisible    = 0;
  barrier();

  if(laneID<8) {
#if defined(LVL_OBJECT)
    const vec3  b[2]   = {bucket.bbox[0].xyz, bucket.bbox[1].xyz};
#else
    const vec3  objPos = bounds[objId].xyz;
    const float R      = bounds[objId].w;
    const vec3  b[2]   = { objPos-vec3(R), objPos+vec3(R) };
#endif
    const vec3  pos    = vec3(b[bitfieldExtract(laneID,0,1)].x,
                              b[bitfieldExtract(laneID,1,1)].y,
                              b[bitfieldExtract(laneID,2,1)].z);

    vec4 trPos = vec4(pos,1.0);
#if defined(LVL_OBJECT)
    trPos = matrix[objId]    *trPos;
#endif
    trPos = scene.viewProject*trPos;
    if(trPos.z>0 && trPos.w>0.001) {
      vec3 bp = trPos.xyz/trPos.w;
      bp.xy = bp.xy*0.5 + vec2(0.5);

      ivec2 scr = ivec2(bp.xy * scene.screenRes) / scene.hiZTileSize;
      scr = clamp(scr, ivec2(0), hiZsize - ivec2(1));

      atomicMin(ibboxShared[0].x, scr.x);
      atomicMin(ibboxShared[0].y, scr.y);

      atomicMax(ibboxShared[1].x, scr.x);
      atomicMax(ibboxShared[1].y, scr.y);

      atomicMin(depthMin, floatBitsToUint(bp.z));
      } else {
      atomicMin(depthMin, floatBitsToUint(0));
      }
    }

  barrier();

  ivec2 ibbox[2];
  ibbox[0] = ibboxShared[0];
  ibbox[1] = ibboxShared[1];

  const uint maxHiZSamples = 16;
  bool       visible       = false;
  if(laneID<maxHiZSamples) {
    float bz      = uintBitsToFloat(depthMin);
    bz = (1.0-bz)*20.0;

    int   mip     = 0;
    uvec2 sz      = (ibbox[1]-ibbox[0])+ivec2(1);
    [[dont_unroll]]
    while(sz.x*sz.y>maxHiZSamples) {
      ibbox[0] = ibbox[0]/2;
      ibbox[1] = ibbox[1]/2;
      sz       = (ibbox[1]-ibbox[0])+ivec2(1);
      mip++;
      }

    if(0<sz.x) {
      ivec2 offset = ivec2(laneID%sz.x,laneID/sz.x);
      ivec2 at     = ibbox[0]+offset;
      if(offset.y<sz.y) {
        float z  = texelFetch(hiZ, at, mip).x;
        if(bz >= z)
          atomicExchange(bboxVisible, 1);
        }
      }
    }
  barrier();

  visible = (bboxVisible!=0);
  return visible;
  }
#endif

uvec2 processMeshlet(const uint meshletId) {
  const uint iboOffset = meshletId * MaxPrim + MaxPrim - 1;
  const uint bits      = indexes[iboOffset];
  uvec4 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);

  uint vertCount = MaxVert;
  uint primCount = MaxPrim;
  if(prim.x==prim.y) {
    // last dummy triangle encodes primitive count
    prim.z = ((bits >> 16) & 0xFF);
    prim.w = ((bits >> 24) & 0xFF);

    primCount = prim.z;
    vertCount = prim.w;
    }
  return uvec2(vertCount, primCount);
  }

uvec3 processPrimitive(const uint meshletId, const uint outId) {
  const uint iboOffset = meshletId * MaxPrim + outId;
  const uint bits      = indexes[iboOffset];
  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

vec4  processVertex(out Varyings var, const uint objId, const uint meshletId, const uint outId) {
  const uint vboOffset = meshletId * MaxVert + outId;

  vec4 position = processVertex(var, objId, vboOffset);
  // position.y = -position.y;
  return position;
  }

#if defined(LVL_OBJECT)
// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
// TODO: productize
bool projectSphere(vec3 c, float r, out vec4 aabb) {
  float P00   = 0; // scene.project[0][0];
  float P11   = 0; // scene.project[1][1];
  float znear = 0; // scene.clipInfo.w;

  if(c.z < r + znear)
    return false;

  vec3  cr   = c * r;
  float czr2 = c.z * c.z - r * r;

  float vx   = sqrt(c.x * c.x + czr2);
  float minx = (vx * c.x - cr.z) / (vx * c.z + cr.x);
  float maxx = (vx * c.x + cr.z) / (vx * c.z - cr.x);

  float vy = sqrt(c.y * c.y + czr2);
  float miny = (vy * c.y - cr.z) / (vy * c.z + cr.y);
  float maxy = (vy * c.y + cr.z) / (vy * c.z - cr.y);

  aabb = vec4(minx * P00, miny * P11, maxx * P00, maxy * P11);
  // clip space -> uv space
  // aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f);

  return true;
  }

void dbgBbox(const uint objId) {
  const ivec3 v[8] = {
    {0,0,0},{1,0,0},{1,1,0},{0,1,0},
    {0,0,1},{1,0,1},{1,1,1},{0,1,1},
    };
  const int ibo[] = {
    0, 1, 3, 3, 1, 2,
    1, 5, 2, 2, 5, 6,
    5, 4, 6, 6, 4, 7,
    4, 0, 7, 7, 0, 3,
    3, 2, 7, 7, 2, 6,
    4, 5, 0, 0, 5, 1
    };
  const vec3 b[2] = {bucket.bbox[0].xyz, bucket.bbox[1].xyz};

  for(int i=0; i<8; ++i) {
    vec4 trPos;
    const ivec3 msk  = v[i];
    const vec3  pos  = vec3(b[msk.x].x,b[msk.y].y,b[msk.z].z);
    trPos = matrix[objId]    *vec4(pos.xyz,1.0);
    trPos = scene.viewProject*trPos;
    gl_MeshVerticesEXT[i].gl_Position = trPos;
#if defined(MAT_VARYINGS)
    shOut             [i].uv          = vec2(0);
#endif
    }
  for(int i=0; i<36; i+=3) {
    gl_PrimitiveTriangleIndicesEXT[i] = uvec3(ibo[i+0],ibo[i+1],ibo[i+2]);
    }
  }

void dbgSphere(const uint objId) {
  vec4 sphere = vec4(matrix[objId][3].xyz, bucket.bboxRadius);
  sphere.xyz = (scene.viewProject*vec4(sphere.xyz,1)).xyz;

  vec4 aabb;
  if(!projectSphere(sphere.xyz,sphere.w,aabb))
    return;

  const ivec3 v[4] = {
    {0,0,0},{1,0,0},{1,1,0},{0,1,0},
    };
  const int ibo[6] = {
    0, 1, 3, 3, 1, 2,
    };

  for(int i=0; i<4; ++i) {
    vec4 trPos = vec4(0);
    trPos.x = mix(aabb.x, aabb.z, v[i].x);
    trPos.y = mix(aabb.y, aabb.w, v[i].y);
    trPos.z = 0;
    trPos.w = 1;

    gl_MeshVerticesEXT[i].gl_Position = trPos;
#if defined(MAT_VARYINGS)
    shOut             [i].uv          = vec2(0);
#endif
    }
  for(int i=0; i<6; i+=3) {
    gl_PrimitiveTriangleIndicesEXT[i] = uvec3(ibo[i+0],ibo[i+1],ibo[i+2]);
    }
  }
#endif

uvec2 pullPayload() {
#if defined(LVL_OBJECT)
  //const uint objId     = gl_WorkGroupID.y + push.firstInstance;
  const uint objId     = payload.offsets[gl_WorkGroupID.y];
  const uint meshletId = gl_WorkGroupID.x + push.meshletBase;
#elif (MESH_TYPE==T_LANDSCAPE)
  const uint objId     = 0;
  const uint meshletId = payload.offsets[gl_WorkGroupID.y];
  //const uint meshletId = gl_WorkGroupID.x + push.meshletBase;
#else
  const uint objId     = 0;
  const uint meshletId = gl_WorkGroupID.x;
#endif
  return uvec2(objId, meshletId);
  }

void main() {
  const uvec2 pl        = pullPayload();
  const uint  objId     = pl.x;
  const uint  meshletId = pl.y;

#if defined(SHADOW_MAP)
#  if (MESH_TYPE==T_LANDSCAPE)
  const bool visible = true; //sphereTest(objId,meshletId);
#  elif (MESH_TYPE==T_PFX)
  const bool visible = true;
#  else
  const bool visible = true; //sphereTest(objId,meshletId);
#  endif
#else
#  if (MESH_TYPE==T_LANDSCAPE)
  const bool visible = true; //bboxTest(meshletId);
#  elif (MESH_TYPE==T_PFX)
  const bool visible = true;
#  else
  const bool visible = true; // bboxTest(objId);
#  endif
#endif

  if(!visible) {
    // NOTE: produces compiller error on DX
    // SetMeshOutputsEXT(0, 0);
    // return;
    }

  const uvec2 mesh      = visible ? processMeshlet(meshletId) : uvec2(0);
  const uint  vertCount = mesh.x;
  const uint  primCount = mesh.y;

  // Alloc outputs
  SetMeshOutputsEXT(vertCount, primCount);
  if(!visible)
    return;

  Varyings var;
  const uint laneID = gl_LocalInvocationIndex;

  // AMD: prefersLocalInvocationVertexOutput / prefersLocalInvocationPrimitiveOutput
  if(laneID<primCount)
    gl_PrimitiveTriangleIndicesEXT[laneID] = processPrimitive(meshletId, laneID);
  if(laneID<vertCount)
    gl_MeshVerticesEXT[laneID].gl_Position = processVertex(var, objId, meshletId, laneID);
#if defined(MAT_VARYINGS)
  if(laneID<vertCount)
    shOut[laneID]                          = var;
#endif

#if WORKGROUP_SIZE<64
  {
    const uint id = laneID+32;
    if(id<primCount)
      gl_PrimitiveTriangleIndicesEXT[id] = processPrimitive(meshletId, id);
    if(id<vertCount)
      gl_MeshVerticesEXT[id].gl_Position = processVertex(var, objId, meshletId, id);
#if defined(MAT_VARYINGS)
    if(laneID<vertCount)
      shOut[id]                          = var;
#endif
  }
#endif

#if 0 && (DEBUG_DRAW) && !defined(LVL_OBJECT)
  for(int i=laneID; i<MaxVert; i+=gl_WorkGroupSize.x) {
    debugId[i] = meshletId;
    }
#endif

#if 1 && defined(LVL_OBJECT) && !defined(DEPTH_ONLY) && (MESH_TYPE==T_SKINING)
  // DEBUG CODE
  memoryBarrierShared();
  barrier();
  if(laneID==0) {
    // dbgBbox(objId);
    dbgSphere(objId);
    }
#endif
  }
