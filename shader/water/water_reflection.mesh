#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#extension GL_EXT_mesh_shader : require

#include "scalar_ops.glsl"
#include "common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;
layout(triangles, max_vertices = 4, max_primitives = 2) out;

out gl_MeshPerVertexEXT {
  vec4 gl_Position;
  } gl_MeshVerticesEXT[];

layout(binding = 2) uniform sampler2D gbufDiffuse;

bool isWater() {
  const ivec2 size = textureSize(gbufDiffuse,0);
  if(any(greaterThanEqual(gl_GlobalInvocationID.xy,size)))
    return false;
  const vec4 diff  = texelFetch(gbufDiffuse, ivec2(gl_GlobalInvocationID.xy), 0);
  return isGBufWater(diff.a);
  }

void main() {
  const vec2 size  = textureSize(gbufDiffuse,0);
  const bool water = isWater();
  const bool any   = workgroupAny(water);

  SetMeshOutputsEXT(any ? 4 : 0,
                    any ? 2 : 0);

  if(any && gl_LocalInvocationID.xy==uvec2(0)) {
    const vec2 tsize = 2.0*(gl_WorkGroupSize.xy)/size;
    const vec2 at    = 2.0*(gl_GlobalInvocationID.xy/size) - vec2(1);

    gl_MeshVerticesEXT[0].gl_Position = vec4(vec2(      0,       0) + at, 0, 1);
    gl_MeshVerticesEXT[1].gl_Position = vec4(vec2(tsize.x,       0) + at, 0, 1);
    gl_MeshVerticesEXT[2].gl_Position = vec4(vec2(tsize.x, tsize.y) + at, 0, 1);
    gl_MeshVerticesEXT[3].gl_Position = vec4(vec2(      0, tsize.y) + at, 0, 1);

    gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0,1,2);
    gl_PrimitiveTriangleIndicesEXT[1] = uvec3(0,2,3);
    }
  }
