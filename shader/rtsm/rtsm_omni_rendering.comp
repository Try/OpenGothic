#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

#define TRANSLUCENCY 1

layout(local_size_x = 16, local_size_y = 16) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  vec3  originLwc;
  } push;
layout(binding = 0)         uniform  writeonly image2D outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Pos { uint  alloc; uint    data[]; } pos;
layout(binding = 5, std430) readonly buffer Lbo { LightSource lights[];        };
layout(binding = 6, std430) readonly buffer VId { uvec4 count; LightId data[]; } vLights;
layout(binding = 7)         uniform  utexture2D meshBinsOmni;

layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;

void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#define CONST_SCRATCH 1
#include "rtsm/rtsm_scratch.glsl"

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
vec3  light     = vec3(0);

shared uint dbgCount;

float raySphereTest(const vec3 origin, const vec3 dir, const vec4 sphere) {
  float R  = sphere.w;
  vec3  oc = sphere.xyz - origin;
  float a  = dot(dir, dir);
  float h  = dot(dir, oc);
  float c  = dot(oc, oc) - R*R;

  if(c < 0)
    return 0; // inside

  //return -1;

  float discriminant = h*h - a*c;
  if(discriminant < 0)
    return -1.0;
  return (h - sqrt(discriminant)) / a;
  }

vec3 rayTriangleTest(const vec3 origin, const vec3 raydir, const vec3 v0, const vec3 v1, const vec3 v2) {
  const vec3  e1    = v1 - v0;
  const vec3  e2    = v2 - v0;
  const vec3  s1    = cross(raydir, e2);
  const float denom = dot(s1, e1);

  if(denom <= 0.0)
    return vec3(-1);

  const float invDemom = 1.0 / denom;
  const vec3  d        = origin - v0;
  const vec3  s2       = cross(d, e1);

  const float u = dot(d,      s1) * invDemom;
  const float v = dot(raydir, s2) * invDemom;

  if(( u < 0.0f ) || ( u > 1.0f ) || ( v < 0.0f ) || ( u + v > 1.0f )) {
    return vec3(-1);
    }

  float t0 = dot(e2, s2) * invDemom;
  return vec3(t0, u, v);
  }

// culling
shared uint  cubeFaces;
shared uint  shTMax;
shared uvec4 bbox[6];
void rayBboxses(const vec3 ray, const float tMax, bool activeRay) {
  const uint  laneID = gl_LocalInvocationIndex;

  shTMax    = 0;
  cubeFaces = 0;
  if(laneID<bbox.length())
    bbox[laneID] = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  barrier();

  const uint face = rayToFace(ray);
  if(activeRay) {
    atomicOr(cubeFaces, 1u<<face);
    atomicMax(shTMax, floatBitsToUint(tMax));
    }
  barrier();

  if(activeRay) {
    const uint id = face;
    const vec2 rf = rayToFace(ray, face);
    atomicMin(bbox[id].x, floatToOrderedUint(rf.x));
    atomicMin(bbox[id].y, floatToOrderedUint(rf.y));
    atomicMax(bbox[id].z, floatToOrderedUint(rf.x));
    atomicMax(bbox[id].w, floatToOrderedUint(rf.y));
    }
  barrier();

  if(laneID<bbox.length() && (cubeFaces & (1 << laneID))!=0) {
    uvec4 aabb = bbox[laneID];
    if(aabb.x==aabb.z || aabb.y==aabb.w) {
      // degenerated bbox
      atomicAnd(cubeFaces, ~(1 << laneID));
      } else {
      bbox[laneID] = floatBitsToUint(orderedUintToFloat(aabb));
      }
    }
  }

bool isPrimitiveVisible(const vec3 origin, const vec4 sphere, uint face) {
  const vec4 aabb = uintBitsToFloat(bbox[face]);
  const vec3 fa = faceToRay(vec2(aabb.xy), face);
  const vec3 fb = faceToRay(vec2(aabb.zy), face);
  const vec3 fc = faceToRay(vec2(aabb.zw), face);
  const vec3 fd = faceToRay(vec2(aabb.xw), face);

  const vec3 p0 = cross(fa, fb);
  const vec3 p1 = cross(fb, fc);
  const vec3 p2 = cross(fc, fd);
  const vec3 p3 = cross(fd, fa);
  const float R = sphere.w;

  if(dot(sphere.xyz, p0) < -R)
    return false;
  if(dot(sphere.xyz, p1) < -R)
    return false;
  if(dot(sphere.xyz, p2) < -R)
    return false;
  if(dot(sphere.xyz, p3) < -R)
    return false;
  return true;
  }

bool isPrimitiveVisible(const vec3 origin, vec3 a, vec3 b, vec3 c, uint face) {
  const vec4 aabb = uintBitsToFloat(bbox[face]);
  const vec3 fa = faceToRay(vec2(aabb.xy), face);
  const vec3 fb = faceToRay(vec2(aabb.zy), face);
  const vec3 fc = faceToRay(vec2(aabb.zw), face);
  const vec3 fd = faceToRay(vec2(aabb.xw), face);

  const vec3 p0 = cross(fa, fb);
  const vec3 p1 = cross(fb, fc);
  const vec3 p2 = cross(fc, fd);
  const vec3 p3 = cross(fd, fa);

  if(dot(a, p0)<0 && dot(b, p0)<0 && dot(c, p0)<0)
    return false;
  if(dot(a, p1)<0 && dot(b, p1)<0 && dot(c, p1)<0)
    return false;
  if(dot(a, p2)<0 && dot(b, p2)<0 && dot(c, p2)<0)
    return false;
  if(dot(a, p3)<0 && dot(b, p3)<0 && dot(c, p3)<0)
    return false;

  return true;
  }

bool isPrimitiveVisible(const vec3 origin, vec4 sphere) {
  sphere.xyz -= origin;

  for(uint face=0; face<bbox.length(); ++face) {
    if((cubeFaces & (1u << face))==0)
      continue;
    if(isPrimitiveVisible(origin, sphere, face))
      return true;
    }
  return false;
  }

bool isPrimitiveVisible(const vec3 origin, vec3 a, vec3 b, vec3 c) {
  a -= origin;
  b -= origin;
  c -= origin;

  for(uint face=0; face<bbox.length(); ++face) {
    if((cubeFaces & (1u << face))==0)
      continue;
    if(isPrimitiveVisible(origin, a, b, c, face))
      return true;
    }
  return false;
  }

shared uint  primitiveCnt;
shared uvec4 primitiveIds[MaxPrim];
shared vec3  meshVertices[MaxVert];

void pullMeshlet(uint ptrM) {
  const uint laneID  = gl_LocalInvocationIndex;
  const uint primCnt = pullPrimitiveCount(ptrM);
  const uint vertCnt = pos.data[ptrM+4];

  if(laneID == 0)
    primitiveCnt = primCnt;

  ptrM += MeshletHeaderSize;
  if(laneID < primCnt)
    primitiveIds[laneID] = pullPrimitiveFull(ptrM, laneID);

  ptrM += MaxPrim;
  if(laneID < vertCnt)
    meshVertices[laneID] = pullVertex(ptrM, laneID);
  }

bool rayMeshletTest(const vec3 origin, const vec3 dir, const float tMax) {
  const float tMin = 15;
  for(uint i=0; i<primitiveCnt; ++i) {
    const uvec3 prim = primitiveIds[i].xyz;
    const vec3  t    = rayTriangleTest(origin, dir, meshVertices[prim.x], meshVertices[prim.y], meshVertices[prim.z]);
    if(tMin<t.x && t.x<tMax)
      return true;
    }
  return false;
  }

float lightIntensity(const vec3 normal, const float distance, const vec3 ldir, const float lrange) {
  const float distanceSquare = (distance * distance);
  const float factor         = distanceSquare / (lrange * lrange);
  const float smoothFactor   = max(1.0 - factor * factor, 0.0);
  if(factor>1.0)
    return 0;

  float lambert = max(0.0,-dot(ldir,normal));
  float lx      = (lambert/max(factor, 0.05)) * (smoothFactor*smoothFactor);
  return lx * Fd_Lambert * 0.1;
  }

shared uint meshletsIds[NumThreads];
shared uint numMeshlets;

void enqueueMeshlets(const uint tilePtr, const vec3 origin, const uint first, const uint maxMeshlets) {
  const uint laneID = gl_LocalInvocationIndex;
  if(first+laneID>=maxMeshlets)
    return;

  const uint ptr = pos.data[tilePtr+first+laneID];
  const vec4 sp  = pullMeshSphere(ptr);
  if(!isPrimitiveVisible(origin, sp))
    return;

  //atomicAdd(dbgCount, 1);
  const uint i = atomicAdd(numMeshlets, 1);
  meshletsIds[i] = ptr;
  }

void enqueuePrimitives(const vec3 origin, const float range) {
  const uint  laneID = gl_LocalInvocationIndex;
  const bool  act    = laneID<primitiveCnt;
  const uvec4 prim   = act ? primitiveIds[laneID] : uvec4(0);
  barrier();

  primitiveCnt = 0;
  barrier();

  if(!act)
    return;

  const vec3 a = meshVertices[prim.x];
  const vec3 b = meshVertices[prim.y];
  const vec3 c = meshVertices[prim.z];

  vec4 plane;
  plane.xyz = normalize(cross(b - a, c - a));
  plane.w   = dot(plane.xyz, a);
  const float dist = dot(plane, vec4(origin,-1));
  if(dist<0 || dist>range)
    return;

  if(!isPrimitiveVisible(origin, a, b, c))
    return;

  atomicAdd(dbgCount, 1);
  const uint id = atomicAdd(primitiveCnt, 1);
  primitiveIds[id] = prim;
  }

void processLight(const vec3 wpos, const vec3 normal, const LightId lId, const uint maxMeshlets) {
  const LightSource src      = lights[lId.id];
  const uint        tilePtr  = lId.ptr;
  const vec3        distance = wpos-src.pos;

  const float       tMax     = length(distance);
  const vec3        ldir     = distance/tMax;
  const float       lpow     = lightIntensity(normal, tMax, ldir, src.range);

  rayBboxses(ldir, tMax, lpow>0);
  barrier();

  if(cubeFaces==0)
    return;

  bool shadow = (lpow<=0.0);

#if 1
  const uint steps = (maxMeshlets + NumThreads - 1)/NumThreads;
  for(uint s=0; s<steps; ++s) {
    numMeshlets = 0;
    barrier();

    enqueueMeshlets(tilePtr, src.pos, s*NumThreads, maxMeshlets);
    barrier();

    for(uint i=0; i<numMeshlets; ++i) {
      const uint ptr = meshletsIds[i];
      pullMeshlet(ptr);
      barrier();

      enqueuePrimitives(src.pos, uintBitsToFloat(shTMax));
      barrier();

      if(!shadow)
        shadow = rayMeshletTest(src.pos, ldir, tMax-1);
      barrier();
      }
    }
#endif

#if 0
  for(uint i=0; i<maxMeshlets; ++i) {
    const uint ptr = pos.data[tilePtr+i];
    const vec4 sp  = pullMeshSphere(ptr);

    pullMeshlet(ptr);
    barrier();

    if(!shadow) {
      float tCluster    = raySphereTest(src.pos, ldir, sp);
      bool  skipCluster = !(0<=tCluster && tCluster<tMax);
      if(!skipCluster)
        shadow = rayMeshletTest(src.pos, ldir, tMax-1);
      }
    barrier();
    }
#endif

  if(shadow)
    return;
  light += vec3(lpow * src.color);
  }

vec3 rayOrigin(ivec2 frag, float depth, vec3 normal) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  const vec4 wpos      = scene.viewProjectLwcInv * scr;
  return (wpos.xyz + normal*NormalBias)/wpos.w;
  }

void main() {
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;

  const vec3  origin = rayOrigin(fragCoord.xy, z, normal) + push.originLwc;
  dbgCount = 0;
  barrier();

  if(vLights.count.x>0) {
    //TODO: many lights
    const uint numMeshlets = texelFetch(meshBinsOmni, ivec2(0,0), 0).x;
    processLight(origin, normal, vLights.data[0], numMeshlets);
    }

  if(valid)
    imageStore(outputImage, ivec2(fragCoord), vec4(light, 1));
  imageDbg(dbgCount);
  }
