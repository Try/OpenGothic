#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

#define TRANSLUCENCY 1

layout(local_size_x = 16, local_size_y = 16) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  vec3  originLwc;
  } push;
layout(binding = 0, r11f_g11f_b10f) uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Pos { uint  alloc; uint    data[]; } pos;
layout(binding = 5, std430) readonly buffer Lbo { LightSource lights[];        };
layout(binding = 6)         uniform  utexture2D primTiles;
layout(binding = 7)         uniform  texture2D  textureMain[];
layout(binding = 8)         uniform  sampler    samplerMain;

layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;

void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#define CONST_SCRATCH 1
#include "rtsm/rtsm_scratch.glsl"
#include "rtsm/rtsm_omni_bboxes.glsl"

const float minOpacity = 0.49/255.0;

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
vec3  light     = vec3(0);

uint primCnt = 0; //counter

uvec2 pullTileData() {
  return texelFetch(primTiles, ivec2((gl_GlobalInvocationID.xy)/RTSM_LIGHT_TILE), 0).xy;
  }

vec2 interpolateUV(vec3 bc, vec2 a, vec2 b, vec2 c) {
  const float u = dot(vec3(a.x,b.x,c.x), bc);
  const float v = dot(vec3(a.y,b.y,c.y), bc);
  return vec2(u, v);
  }

vec2 interpolateUV(vec3 bc, uint a, uint b, uint c) {
  return interpolateUV(bc, unpackHalf2x16(a), unpackHalf2x16(b), unpackHalf2x16(c));
  }

float sampleAlpha(const uint bucketId, vec2 uv, float lodBias) {
  return textureLod(sampler2D(textureMain[nonuniformEXT(bucketId)], samplerMain), uv, lodBias).a;
  }

vec3 rayTriangleTest(const vec3 origin, const vec3 raydir, const vec3 v0, const vec3 v1, const vec3 v2) {
  const vec3  e1    = v1 - v0;
  const vec3  e2    = v2 - v0;
  const vec3  s1    = cross(raydir, e2);
  const float denom = dot(s1, e1);

  if(denom <= 0.0)
    return vec3(-1);

  const float invDemom = 1.0 / denom;
  const vec3  d        = origin - v0;
  const vec3  s2       = cross(d, e1);

  const float u = dot(d,      s1) * invDemom;
  const float v = dot(raydir, s2) * invDemom;

  if(( u < 0.0f ) || ( u > 1.0f ) || ( v < 0.0f ) || ( u + v > 1.0f )) {
    return vec3(-1);
    }

  float t0 = dot(e2, s2) * invDemom;
  return vec3(t0, u, v);
  }

// ray related
vec3 rayOrigin(ivec2 frag, float depth, vec3 normal) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  const vec4 wpos      = scene.viewProjectLwcInv * scr;
  return (wpos.xyz + normal*NormalBias)/wpos.w;
  }

float lightIntensity(const vec3 normal, const float distance, const vec3 ldir, const float lrange) {
  const float distanceSquare = (distance * distance);
  const float factor         = distanceSquare / (lrange * lrange);
  const float smoothFactor   = max(1.0 - factor * factor, 0.0);
  if(factor>1.0)
    return 0;

  float lambert = max(0.0,-dot(ldir,normal));
  float lx      = (lambert/max(factor, 0.05)) * (smoothFactor*smoothFactor);
  return lx * Fd_Lambert * 0.1;
  }

const  uint  MaxChunk = NumThreads/2;
shared vec3  meshVertices   [MaxChunk*3];
shared uint  meshVertexUV   [MaxChunk*3];
shared uint  primitiveBucket[MaxChunk];
shared uint  numLocalPrim;

void pullPrimitives(const vec3 origin, const uint pkg) {
  const uint  laneID = gl_LocalInvocationIndex;

  const uint  ptr  = (pkg >> 8);
  const uint  pId  = pkg & 0xFF;
  const uvec4 tri  = pullPrimitiveFull(ptr+MeshletHeaderSize, pId);
  const uint  ptrV = ptr + MeshletHeaderSize + MaxPrim;

  //FIXME: register pressure
  const vec3 a = pullVertex(ptrV, tri.x);
  const vec3 b = pullVertex(ptrV, tri.y);
  const vec3 c = pullVertex(ptrV, tri.z);

  if(!isPrimitiveVisible(origin,a,b,c))
    return;

  const uint  id       = atomicAdd(numLocalPrim, 1);
  primitiveBucket[id]  = packUint2x16(uvec2(tri.w, pullMeshBucketId(ptr)));

  meshVertices[id*3+0] = a;
  meshVertices[id*3+1] = b;
  meshVertices[id*3+2] = c;

  meshVertexUV[id*3+0] = pullVertexUV(ptrV, tri.x);
  meshVertexUV[id*3+1] = pullVertexUV(ptrV, tri.y);
  meshVertexUV[id*3+2] = pullVertexUV(ptrV, tri.z);
  }

shared uint inactiveRays;
float rasterBatch(const vec3 origin, const vec3 dir, const float tMax, float opacity) {
  const float tMin = 30;

  const uint laneID = gl_LocalInvocationIndex;
  if(opacity<=minOpacity)
    return opacity;

  for(uint id=0; id<numLocalPrim; ++id) {
    const vec3  a  = meshVertices[id*3+0];
    const vec3  b  = meshVertices[id*3+1];
    const vec3  c  = meshVertices[id*3+2];
    const vec3  rt = rayTriangleTest(origin, dir, a, b, c);
    const float t  = rt.x;
    if(!(tMin<t && t<tMax))
      continue;
#if TRANSLUCENCY
    const uint flags = primitiveBucket[id];
    if((flags & BK_SOLID)!=0) {
      opacity = 0;
      break;
      }
    const vec3  bc       = vec3(1-rt.y-rt.z, rt.y, rt.z);
    const vec2  uv       = interpolateUV(bc, meshVertexUV[id*3+0], meshVertexUV[id*3+1], meshVertexUV[id*3+2]);
    const float lodBias  = 0;
    const uint  bucketId = primitiveBucket[id] >> 16;
    const float alpha    = sampleAlpha(bucketId, uv, lodBias);
    opacity *= (1.0-alpha);
    if(opacity<=minOpacity)
      break;
#else
    opacity = 0;
    break;
#endif
    }

  return opacity;
  }

bool earlyOut() {
  return inactiveRays==NumThreads;
  }

float tracePacket(const uvec2 tileHeader, const vec3 origin, const vec3 dir, const float tMax, float opacity) {
  const uint  laneID        = gl_LocalInvocationIndex;
  const uint  numPrimitives = tileHeader.y & 0xFFFF;

  if((tileHeader.y&BIN_BAD_BIT)!=0) {
    // error - emit 4x4 grid to display
    ivec2 tile    = fragCoord/4;
    return (tile.x+tile.y)%2==0 ? 1.0 : 0.0;
    }

  if(tileHeader.x==NULL || numPrimitives==0)
    return opacity;

  inactiveRays = 0;
  rayBboxses(dir, opacity>0);
  barrier();

  if(numPlanes==0)
    return opacity;

  if(opacity<=minOpacity)
    atomicAdd(inactiveRays, 1);
  barrier();

  for(uint s=0; s<numPrimitives; s+=MaxChunk) {
    if(earlyOut())
      break;

    numLocalPrim = 0;
    barrier();

    const uint i = s + laneID;
    if(i<numPrimitives && laneID<MaxChunk) {
      const uint ptr  = pos.data[tileHeader.x + i];
      pullPrimitives(origin, ptr);
      }
    barrier();

    primCnt += numLocalPrim;
    opacity = rasterBatch(origin, dir, tMax, opacity);
    barrier();
    }

  // primCnt = visBits;

  if(opacity<=minOpacity)
    return 0;
  return opacity;
  }

void processLight(const vec3 wpos, const vec3 normal, const LightSource src, const uint tilePtr, const uint numPrimitives) {
  const vec3  distance = wpos-src.pos;
  const float tMax     = length(distance);
  const vec3  ldir     = distance/tMax;
  float       lpow     = lightIntensity(normal, tMax, ldir, src.range);

  lpow = tracePacket(uvec2(tilePtr, numPrimitives), src.pos, ldir, tMax, lpow);

  const uint face = rayToFace(ldir);
  if(false) {
    //light = lpow * debugColors[ldir.y>0 ? 2 : 1];
    light = lpow * debugColors[face];
    return;
    }

  light += vec3(lpow * src.color);
  }

void processAllLights(const uvec2 tileHeader, const bool valid) {
  if((tileHeader.y&BIN_BAD_BIT)!=0) {
    // error - emit 4x4 grid to display
    ivec2 tile = fragCoord/4;
    light = (tile.x+tile.y)%2==0 ? vec3(0,0,1) : vec3(0);
    return;
    }

  if(tileHeader.x==NULL) {
    light = vec3(0.0);
    return;
    }

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;
  const vec3  origin = rayOrigin(fragCoord.xy, z, normal) + push.originLwc;

  const uint lptr    = tileHeader.x;
  const uint nLights = tileHeader.y & 0xFFFF;
  for(uint i=0; i<nLights; ++i) {
    const uint lid           = pos.data[lptr + i*4 + 0];
    const uint ptr           = pos.data[lptr + i*4 + 1];
    const uint numPrimitives = pos.data[lptr + i*4 + 2];
    processLight(origin, normal, lights[lid], ptr, numPrimitives);
    }
  }

void main() {
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const uvec2 tile   = pullTileData();
  processAllLights(tile, valid);

  if(valid)
    imageStore(outputImage, ivec2(fragCoord), vec4(light, 1));
  imageDbg(primCnt);
  }
