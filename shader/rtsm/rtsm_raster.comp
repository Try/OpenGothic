#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

#define TRANSLUCENCY 1

layout(local_size_x = 16, local_size_y = 16) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0, r8)     uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Pos { uint alloc; uint data[]; } pos;

layout(binding = 6)         uniform  utexture2D primitiveBins;
layout(binding = 7)         uniform  texture2D  textureMain[];
layout(binding = 8)         uniform  sampler    samplerMain;

layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;

void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#define CONST_SCRATCH 1
#include "rtsm/rtsm_scratch.glsl"

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
const float minOpacity = 0.49/255.0;

uint primCnt = 0;

vec2 interpolateUV(vec3 bc, vec2 a, vec2 b, vec2 c) {
  const float u = dot(vec3(a.x,b.x,c.x), bc);
  const float v = dot(vec3(a.y,b.y,c.y), bc);
  return vec2(u, v);
  }

vec2 interpolateUV(vec3 bc, uint a, uint b, uint c) {
  return interpolateUV(bc, unpackHalf2x16(a), unpackHalf2x16(b), unpackHalf2x16(c));
  }

float sampleAlpha(const uint bucketId, vec2 uv, float lodBias) {
  return textureLod(sampler2D(textureMain[nonuniformEXT(bucketId)], samplerMain), uv, lodBias).a;
  }


// utility
shared uvec4 rayBbox;
shared uint  rayZmin;
void rayBboxses(const vec3 ray, bool activeRay) {
  rayBbox = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  rayZmin = 0xFFFFFFFF;
  barrier();

  if(activeRay) {
    atomicMin(rayBbox.x, floatToOrderedUint(ray.x));
    atomicMin(rayBbox.y, floatToOrderedUint(ray.y));
    atomicMax(rayBbox.z, floatToOrderedUint(ray.x));
    atomicMax(rayBbox.w, floatToOrderedUint(ray.y));
    atomicMin(rayZmin,   floatToOrderedUint(ray.z));
    }
  barrier();

  if(gl_LocalInvocationIndex==0) {
    rayBbox = floatBitsToUint(orderedUintToFloat(rayBbox));
    rayZmin = floatBitsToUint(orderedUintToFloat(rayZmin));
    }
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  }

// ray managment
vec3 rayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

// meshlet-data. should be around
// 2kb for occupancy in 8x8 mode
// 8kb for 16x16
const  uint    MaxChunk = NumThreads/2;
shared vec2    meshVertices    [MaxChunk*3];
shared float   meshVertexZ     [MaxChunk*3];
shared uint    meshVertexUV    [MaxChunk*3];
shared uint    primitiveBucket [MaxChunk];
shared uint    numLocalPrim;

bool isPrimitiveVisible(const vec4 aabb, const float depthMax) {
  const vec4 rbbox = uintBitsToFloat(rayBbox);
  if(uintBitsToFloat(rayZmin) > depthMax)
    return false;
  if(!bboxIntersect(aabb, rbbox))
    return false;
  return true;
  }

uvec2 pullPrimitiveList() {
  ivec2 tileCoord = (fragCoord/RTSM_BIN_SIZE);
  return texelFetch(primitiveBins, ivec2(tileCoord), 0).xy;
  }

float triangleArea(const vec2 da, const vec2 db) {
  return db.x*da.y - db.y*da.x;
  }

void pullPrimitives(const uint pkg) {
  const uint  laneID = gl_LocalInvocationIndex;

  const uint  ptr  = (pkg >> 8);
  const uint  pId  = pkg & 0xFF;
  const uvec4 tri  = pullPrimitiveFull(ptr+MeshletHeaderSize, pId);
  const uint  ptrV = ptr + MeshletHeaderSize + MaxPrim;

  //FIXME: register pressure
  const vec3  a    = pullVertex(ptrV, tri.x);
  const vec3  b    = pullVertex(ptrV, tri.y);
  const vec3  c    = pullVertex(ptrV, tri.z);

  const vec4  tbb  = bboxOf(a.xy, b.xy, c.xy);
  const float rz   = max(a.z, max(b.z, c.z));
  if(!isPrimitiveVisible(tbb, rz)) {
    return;
    }

  const uint  id       = atomicAdd(numLocalPrim, 1);
  primitiveBucket[id]  = packUint2x16(uvec2(tri.w, pullMeshBucketId(ptr)));

  meshVertexZ [id*3+0] = a.z;
  meshVertexZ [id*3+1] = b.z;
  meshVertexZ [id*3+2] = c.z;

  meshVertexUV[id*3+0] = pullVertexUV(ptrV, tri.x);
  meshVertexUV[id*3+1] = pullVertexUV(ptrV, tri.y);
  meshVertexUV[id*3+2] = pullVertexUV(ptrV, tri.z);

  const vec2 da = a.xy - c.xy;
  const vec2 db = b.xy - c.xy;

  const float areaInv  = 1.0/triangleArea(da, db);
  meshVertices[id*3+0] = da * areaInv;
  meshVertices[id*3+1] = db * areaInv;
  meshVertices[id*3+2] = c.xy;
  }

shared uint inactiveRays;
float rasterBatch(const vec3 ray, float opacity) {
  const uint laneID = gl_LocalInvocationIndex;
  if(opacity<=minOpacity)
    return opacity;

  for(uint id=0; id<numLocalPrim; ++id) {
    const vec2  a    = meshVertices[id*3+0];
    const vec2  b    = meshVertices[id*3+1];
    const vec2  c    = meshVertices[id*3+2];

    const vec2  rayC = vec2(c.y - ray.y, ray.x - c.x);
    const float w0   = -dot(b, rayC);
    const float w1   = +dot(a, rayC);
    const float w2   = 1 - w0 - w1;

    if(w0 < 0 || w1 < 0 || w2 < 0)
      continue;

    const vec3  bc      = vec3(w0,w1,w2);
    const float aZ      = meshVertexZ[id*3+0];
    const float bZ      = meshVertexZ[id*3+1];
    const float cZ      = meshVertexZ[id*3+2];
    const float depth   = dot(vec3(aZ,bZ,cZ), bc);
    if(depth <= ray.z)
      continue;

#if TRANSLUCENCY
    const uint flags = primitiveBucket[id];
    if((flags & BK_SOLID)!=0) {
      opacity = 0;
      break;
      }

    const vec2  uv       = interpolateUV(bc, meshVertexUV[id*3+0], meshVertexUV[id*3+1], meshVertexUV[id*3+2]);
    const float lodBias  = log2((depth - ray.z)*128);
    const uint  bucketId = primitiveBucket[id] >> 16;
    const float alpha    = sampleAlpha(bucketId, uv, lodBias);
    opacity *= (1.0-alpha);
    if(opacity<=minOpacity)
      break;
#else
    opacity = 0;
    break;
#endif
    }

  if(opacity<=minOpacity)
    atomicAdd(inactiveRays, 1);
  return opacity;
  }

bool earlyOut() {
  return inactiveRays==NumThreads;
  }

float tracePacket(const uvec2 tileHeader, const vec3 ray, float opacity) {
  const uint  laneID        = gl_LocalInvocationIndex;
  const uint  numPrimitives = tileHeader.y & 0xFFFF;
  const uint  steps         = (numPrimitives + MaxChunk - 1)/MaxChunk;

  if(opacity<=minOpacity)
    atomicAdd(inactiveRays, 1);
  barrier();

  for(uint s=0; s<numPrimitives; s+=MaxChunk) {
    if(earlyOut())
      break;

    numLocalPrim = 0;
    barrier();
    const uint i = s + laneID;
    if(i<numPrimitives && laneID<MaxChunk)
      pullPrimitives(pos.data[tileHeader.x + i]);
    barrier();

    primCnt += numLocalPrim;
    opacity = rasterBatch(ray, opacity);
    barrier();
    }

  if(opacity<=minOpacity)
    return 0;
  return opacity;
  }

void main() {
  const uvec2 tileHeader = pullPrimitiveList();
  if(tileHeader.y==0)
    return;

  if((tileHeader.y & BIN_BAD_BIT)!=0) {
    // error - emit 4x4 grid to display
    ivec2 tile    = fragCoord/4;
    float opacity = (tile.x+tile.y)%2==0 ? 1.0 : 0.0;
    imageStore(outputImage, fragCoord, vec4(opacity));
    return;
    }

  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;
  const float lamb   = imageLoad(outputImage, fragCoord).x;

  const vec4  wpos   = worldPos(fragCoord.xy, z) + vec4(normal*NormalBias, 0);
  const vec3  ray    = rayOrigin(wpos);

  inactiveRays = 0;
  rayBboxses(ray, lamb>minOpacity);
  barrier();

  const float opacity = tracePacket(tileHeader, ray, lamb);
  if(valid && opacity!=lamb)
    imageStore(outputImage, fragCoord, vec4(opacity));

  imageDbg(primCnt);
  }
