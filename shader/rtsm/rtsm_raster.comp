#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

#define TRANSLUCENCY 1

layout(local_size_x = 8, local_size_y = 8) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0, r8)     uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Pos { uint alloc; uint data[]; } pos;

layout(binding = 6)         uniform  utexture2D primitiveBins;
layout(binding = 7)         uniform  texture2D  textureMain[];
layout(binding = 8)         uniform  sampler    samplerMain;

layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;

void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#define CONST_SCRATCH 1
#include "rtsm/rtsm_scratch.glsl"

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
const float minOpacity = 0.49/255.0;

uint primCnt = 0;

float sampleAlpha(const uint bucketId, vec3 bc, float areaInv, vec2 a, vec2 b, vec2 c, float lodBias) {
  const float u = dot(vec3(a.x,b.x,c.x), bc)*areaInv;
  const float v = dot(vec3(a.y,b.y,c.y), bc)*areaInv;

  //TODO: find optimal lod
  return textureLod(sampler2D(textureMain[nonuniformEXT(bucketId)], samplerMain), vec2(u,v), lodBias).a;
  }

float sampleAlpha(const uint bucketId, vec3 bc, float areaInv, uint a, uint b, uint c, float lodBias) {
  return sampleAlpha(bucketId, bc, areaInv, unpackHalf2x16(a), unpackHalf2x16(b), unpackHalf2x16(c), lodBias);
  }

// utility
shared uvec4 rayBbox;
shared uint  rayZmin;
void rayBboxses(const vec3 ray, bool activeRay) {
  rayBbox = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  rayZmin = 0xFFFFFFFF;
  barrier();

  if(activeRay) {
    atomicMin(rayBbox.x, floatToOrderedUint(ray.x));
    atomicMin(rayBbox.y, floatToOrderedUint(ray.y));
    atomicMax(rayBbox.z, floatToOrderedUint(ray.x));
    atomicMax(rayBbox.w, floatToOrderedUint(ray.y));
    atomicMin(rayZmin,   floatToOrderedUint(ray.z));
    }
  barrier();

  if(gl_LocalInvocationIndex==0) {
    rayBbox = floatBitsToUint(orderedUintToFloat(rayBbox));
    rayZmin = floatBitsToUint(orderedUintToFloat(rayZmin));
    }
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  }

// pagging
float shadowLod(vec2 dx, vec2 dy) {
  float px     = dot(dx, dx);
  float py     = dot(dy, dy);
  float maxLod = 0.5 * log2(max(px, py)); // log2(sqrt()) = 0.5*log2()
  float minLod = 0.5 * log2(min(px, py));

  const float bias = 0;
  return max(0, minLod + bias);
  }

// ray managment
vec3 rayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

vec3 rayOrigin(const vec4 wpos, const vec4 offset) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos + offset;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

// meshlet-data
const  uint   MaxChunk = 64;
shared Vertex meshVertices    [MaxChunk*3];
shared uint   primitiveBucket [MaxChunk];
shared float  primitiveAreaInv[MaxChunk];
shared uint   numLocalPrim;
bool isPrimitiveVisible(const vec4 aabb, const float depthMax) {
  const vec4 rbbox = uintBitsToFloat(rayBbox);
  if(uintBitsToFloat(rayZmin) > depthMax)
    return false;
  if(!bboxIntersect(aabb, rbbox))
    return false;
  return true;
  }

uvec2 pullPrimitiveList() {
  ivec2 tileCoord = (fragCoord/RTSM_BIN_SIZE);
  return texelFetch(primitiveBins, ivec2(tileCoord), 0).xy;
  }

void pullPrimitives(const uint pkg) {
  const uint  laneID  = gl_LocalInvocationIndex;

  const uint  ptr = (pkg >> 8);
  const uint  pId = pkg & 0xFF;

  //const uint  primCnt  = pullPrimitiveCount(ptr);
  const uvec4 tri      = pullPrimitiveFull(ptr+MeshletHeaderSize, pId);
  const uint  ptrV     = ptr + MeshletHeaderSize + MaxPrim;

  //FIXME: register pressure
  const Vertex a    = pullVertexFull(ptrV, tri.x);
  const Vertex b    = pullVertexFull(ptrV, tri.y);
  const Vertex c    = pullVertexFull(ptrV, tri.z);

  const vec4  tbb = bboxOf(a.pos.xy, b.pos.xy, c.pos.xy);
  const float rz  = max(a.pos.z, max(b.pos.z, c.pos.z));
  if(!isPrimitiveVisible(tbb, rz)) {
    return;
    }

  const uint bucketId = pullMeshBucketId(ptr);

  const uint id = atomicAdd(numLocalPrim, 1);
  meshVertices[id*3+0] = a;
  meshVertices[id*3+1] = b;
  meshVertices[id*3+2] = c;
  primitiveAreaInv[id] = 1.0/edgeFunction(a.pos.xy, b.pos.xy, c.pos.xy);
  primitiveBucket [id] = packUint2x16(uvec2(bucketId,tri.w));
  }

shared uint activeRays[NumThreads/32];
float rasterBatch(const vec3 ray, float opacity) {
  const uint laneID = gl_LocalInvocationIndex;

  for(uint id=0; id<numLocalPrim; ++id) {
    if(opacity<=minOpacity)
      break;

    vec3  a  = meshVertices[id*3+0].pos;
    vec3  b  = meshVertices[id*3+1].pos;
    vec3  c  = meshVertices[id*3+2].pos;

    float w0 = edgeFunction(b.xy, c.xy, ray.xy);
    float w1 = edgeFunction(c.xy, a.xy, ray.xy);
    float w2 = edgeFunction(a.xy, b.xy, ray.xy);

    if(w0 < 0 || w1 < 0 || w2 < 0)
      continue;

    const float areaInv = primitiveAreaInv[id];
    const vec3  bc      = vec3(w0,w1,w2);
    const float depth   = dot(vec3(a.z,b.z,c.z), bc)*areaInv;
    if(depth <= ray.z)
      continue;

#if TRANSLUCENCY
    const uint flags = primitiveBucket[id] >> 16;
    if((flags & BK_SOLID)==0) {
      const float lodBias  = log2((depth - ray.z)*128);
      const uint  bucketId = primitiveBucket[id] & 0xFFFF;
      const float alpha    = sampleAlpha(bucketId, bc, areaInv, meshVertices[id*3+0].uv, meshVertices[id*3+1].uv, meshVertices[id*3+2].uv, lodBias);
      opacity *= (1.0-alpha);
      } else {
      opacity = 0;
      }
#else
    opacity = 0;
#endif
    }

  if(opacity<=minOpacity)
    atomicAnd(activeRays[laneID/32], ~(1u<<(laneID%32)));
  return opacity;
  }

bool earlyOut() {
  [[unroll]]
  for(uint i=0; i<activeRays.length(); ++i)
    if(activeRays[i]!=0)
      return false;
  return true;
  }

float tracePacket(const uvec2 tileHeader, const vec3 ray, float opacity) {
  const uint  laneID        = gl_LocalInvocationIndex;
  const uint  numPrimitives = tileHeader.y & 0xFFFF;
  const uint  steps         = (numPrimitives + MaxChunk - 1)/MaxChunk;

  if(opacity>minOpacity)
    atomicOr(activeRays[laneID/32], 1u<<(laneID%32));
  barrier();

  for(uint s=0; s<steps; ++s) {
    if(earlyOut())
      break;

    numLocalPrim = 0;
    barrier();
    const uint i = s*MaxChunk + laneID;
    if(i<numPrimitives && laneID<MaxChunk)
      pullPrimitives(pos.data[tileHeader.x + i]);
    barrier();

    primCnt += numLocalPrim;
    opacity = rasterBatch(ray, opacity);
    barrier();
    }

  if(opacity<=minOpacity)
    return 0;
  return opacity;
  }

void main() {
  const uvec2 tileHeader = pullPrimitiveList();
  if(tileHeader.y==0)
    return;

  if((tileHeader.y & (1u<<31))!=0) {
    // error - emit 4x4 grid to display
    ivec2 tile    = fragCoord/4;
    float opacity = (tile.x+tile.y)%2==0 ? 1.0 : 0.0;
    imageStore(outputImage, fragCoord, vec4(opacity));
    return;
    }

  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;
  const float lamb   = imageLoad(outputImage, fragCoord).x;

  const vec4  wpos   = worldPos(fragCoord.xy, z) + vec4(normal*NormalBias, 0);
  const vec3  ray    = rayOrigin(wpos);
  const vec2  ray1   = rayOrigin(wpos, scene.vsmDdx).xy;
  const vec2  ray2   = rayOrigin(wpos, scene.vsmDdy).xy;

  if(gl_LocalInvocationIndex<activeRays.length())
    activeRays[gl_LocalInvocationIndex] = 0;
  rayBboxses(ray, lamb>minOpacity);
  barrier();

  const float opacity = tracePacket(tileHeader, ray, lamb);
  if(opacity!=lamb)
    imageStore(outputImage, fragCoord, vec4(opacity));

  imageDbg(primCnt);
  }
