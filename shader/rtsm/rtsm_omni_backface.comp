#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable

#include "rtsm/rtsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 512) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0, std140) uniform  UboScene    { SceneDesc   scene;                    };
layout(binding = 1, std430) readonly buffer Lbo  { LightSource lights[];                 };
layout(binding = 2, std430)          buffer VId  { uvec4       count;   LightId data[];  } vLights;
layout(binding = 3, rg32ui) uniform  uimage2D    lightBins;
layout(binding = 4, std430) readonly buffer Cbo  { Cluster     clusters[];               };
layout(binding = 5, std430)          buffer Pos  { uint        alloc;  uint  data[];     } pos;

#include "rtsm/rtsm_scratch.glsl"

shared uint primitiveId[2048];
shared uint numPrimitives;
shared uint primListPtr;

void storeBin(uint lightId, uint ptr, uint num) {
  if(gl_LocalInvocationIndex!=0)
    return;
  if(ptr==NULL)
    num = 0;
  imageStore(lightBins, ivec2(lightId,0), ivec4(ptr,num,0,0));
  }

uint packPrimitiveId(uint meshlet, uint prim) {
  return (meshlet << 8) | prim;
  }

bool isPrimitiveVisible(const uint ptr, const uint primId, const LightSource lx) {
  uint ptrM = ptr;

  ptrM += MeshletHeaderSize;
  const uvec3 tri = pullPrimitive(ptrM, primId);

  ptrM += MaxPrim;
  const vec3  a   = pullVertex(ptrM, tri.x);
  const vec3  b   = pullVertex(ptrM, tri.y);
  const vec3  c   = pullVertex(ptrM, tri.z);

  vec4 plane;
  plane.xyz = normalize(cross(b - a, c - a));
  plane.w   = dot(plane.xyz, a);

  const float dist = dot(plane, vec4(lx.pos,-1));
  if(dist<0 || dist>lx.range)
    return false;
  return true;
  }

void processMeshletPrimitives(const uint ptr, const uint primCount, const uint primId, const LightSource lx, const bool counting) {
  if(primId>=primCount)
    return;

  if(!isPrimitiveVisible(ptr, primId, lx))
    return;

  const uint id = atomicAdd(numPrimitives, 1);
  if(counting) {
    if(id<primitiveId.length())
      primitiveId[id] = packPrimitiveId(ptr, primId);
    } else {
    pos.data[primListPtr + id] = packPrimitiveId(ptr, primId);
    }
  }

void traceBin(const uint tilePtr, const uint visCount, const LightSource lx, bool counting) {
  const uint  laneID      = gl_LocalInvocationIndex;
  const uint  primPerStep = 32;
  const uint  meshPerStep = NumThreads / primPerStep;

  numPrimitives = 0;
  barrier();

  for(uint i=(laneID/primPerStep); i<visCount; i+=meshPerStep) {
    const uint laneMs  = laneID % primPerStep;
    const uint ptr     = pos.data[tilePtr + i];
    const uint primCnt = pullPrimitiveCount(ptr);

    for(uint r=laneMs; r<MaxPrim; r+=primPerStep)
      processMeshletPrimitives(ptr, primCnt, r, lx, counting);
    }
  }

void storeShortList() {
  const uint laneID = gl_LocalInvocationIndex;

  for(uint i=laneID; i<numPrimitives; i+=NumThreads) {
    pos.data[primListPtr + i] = primitiveId[i];
    }
  }

void main() {
  const uint laneID = gl_LocalInvocationIndex;

  const uint        lightId = vLights.data[gl_WorkGroupID.x].id;
  const LightSource lx      = lights[lightId];

  const uvec2 tileBin     = imageLoad(lightBins, ivec2(lightId,0)).xy;
  const uint  ptr         = tileBin.x;
  const uint  numMeshlets = tileBin.y;

  traceBin(ptr, numMeshlets, lx, true);
  barrier();

  if(laneID==0)
    primListPtr = allocScratch(numPrimitives);
  barrier();

  storeBin(lightId, primListPtr, numPrimitives);
  if(primListPtr==NULL)
    return; //OOM

  if(numPrimitives < primitiveId.length()) {
    storeShortList();
    return;
    }
  barrier();

  traceBin(ptr, numMeshlets, lx, false);
  }
