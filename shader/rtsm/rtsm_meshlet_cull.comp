#version 450

#extension GL_GOOGLE_include_directive : enable

#include "rtsm/rtsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 16) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0)         uniform texture2D   outputImage;
layout(binding = 1, std140) uniform UboScene    { SceneDesc scene;   };
layout(binding = 2)         uniform texture2D   depth;
layout(binding = 3, std430)         buffer Pos  { uint  alloc; uint data[];  } pos;
layout(binding = 4, std430)         buffer CB   { uvec4 cmd;   uint tiles[]; } largeTile;
layout(binding = 5, rg32ui) uniform writeonly uimage2D tileBins;
layout(binding = 6, r32ui)  uniform writeonly uimage2D tileSmp;

layout(binding = 9, r32ui)  uniform uimage2D           dbgImage;

void imageDbg(ivec2 at, uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, at, uvec4(info));
#endif
  }

#include "rtsm/rtsm_scratch.glsl"

// tiles: 128 -> 32, 5'576 bytes
#include "rtsm/rtsm_tile_bboxes.glsl"

// + ~10kb for lists
shared uint  meshletsIdGlob[2048];
shared uint  numMeshletsGlob;

shared uint  meshletsId[256];
shared uint  numMeshlets;

shared uint  meshListPtr;

void storeFullList(ivec2 tileId) {
  if(any(greaterThanEqual(tileId, imageSize(tileBins))))
    return;

  const uvec2 l = uvec2(1, pos.data[0]);
  imageStore(tileBins, tileId, uvec4(l, 0, 0));
  imageDbg(tileId, l.y);

  const uint id = atomicAdd(largeTile.cmd.x, 1);
  largeTile.tiles[id] = packUint2x16(tileId);
  }

void storeEmptyList(ivec2 tileId) {
  if(all(lessThan(tileId, imageSize(tileBins)))) {
    imageStore(tileBins, tileId, uvec4(NULL));
    imageDbg(tileId, 0);
    }
  }

void storeFullList() {
  const uint laneID = gl_LocalInvocationIndex;
  if(laneID<16) {
    const ivec2 at = ivec2(gl_WorkGroupID.xy)*4 + ivec2(laneID%4, laneID/4);
    storeFullList(at);
    }
  }

void storeEmptyList() {
  const uint laneID = gl_LocalInvocationIndex;
  if(laneID<16) {
    const ivec2 at = ivec2(gl_WorkGroupID.xy)*4 + ivec2(laneID%4, laneID/4);
    storeEmptyList(at);
    }
  }

void storeMeshList(ivec2 tileId) {
  const uint laneID = gl_LocalInvocationIndex;

  if(numMeshlets>=meshletsId.length()) {
    if(laneID==0)
      storeFullList(tileId);
    return;
    }

  if(laneID==0) {
    meshListPtr = numMeshlets==0 ? NULL : atomicAdd(pos.alloc, numMeshlets);
    if(meshListPtr+numMeshlets>pos.data.length()) {
      // out of memory
      meshListPtr = NULL;
      numMeshlets = 0;
      }
    imageStore(tileBins, tileId, uvec4(meshListPtr, numMeshlets, 0, 0));
    imageDbg(tileId, numMeshlets);
    }
  barrier();

  // store pointer to meshlets list and list-data
  for(uint i=laneID; i<numMeshlets; i+=NumThreads)
    pos.data[meshListPtr + i] = meshletsId[i];
  }

bool isMeshletVisible(uint ptr, const uint tileId) {
  vec4  aabb     = pullMeshAabb(ptr);
  float depthMax = pullMeshDepthMax(ptr);
  return isAabbVisible(aabb, depthMax, tileId+1);
  }

bool isMeshletVisible(uint ptr) {
  // global
  vec4  aabb     = pullMeshAabb(ptr);
  float depthMax = pullMeshDepthMax(ptr);
  return isAabbVisible(aabb, depthMax, 0);
  }

void traceMeshlets(const uint tileId) {
  const uint laneID = gl_LocalInvocationIndex;

  numMeshlets = 0;
  barrier();

  for(uint i=laneID; i<numMeshletsGlob; i+=NumThreads) {
    const uint ptr = meshletsIdGlob[i];
    if(!isMeshletVisible(ptr, tileId))
      continue;
    const uint id = atomicAdd(numMeshlets,1);
    if(id>=meshletsId.length())
      continue; //overflow
    meshletsId[id] = ptr;
    }
  }

void traceMeshlets(const uint tilePtr, const uint visCount) {
  const uint laneID = gl_LocalInvocationIndex;

  numMeshletsGlob = 0;
  barrier();

  for(uint i=laneID; i<visCount; i+=NumThreads) {
    const uint ptr = pos.data[tilePtr + i];
    if(!isMeshletVisible(ptr))
      continue;

    const uint id = atomicAdd(numMeshletsGlob,1);
    if(id>=meshletsIdGlob.length())
      break; // slow-path, with indirect dispatch
    meshletsIdGlob[id] = ptr;
    }
  barrier();

  if(numMeshletsGlob>meshletsIdGlob.length()) {
    storeFullList();
    return;
    }

  for(int i=0; i<16; ++i) {
    const ivec2 at  = ivec2(gl_WorkGroupID.xy)*4 + ivec2(i%4, i/4);
    const uint  tid = 1 + i;
    if(numSlices[tid]==0) {
      storeEmptyList(at);
      continue;
      }

    traceMeshlets(i);
    barrier();

    storeMeshList(at);
    barrier();
    // imageStore(tileBins, at, uvec4(NULL, numMeshlets, 0, 0));
    }
  }

void main() {
  const uint laneID = gl_LocalInvocationIndex;

  tileBboxes(ivec2(gl_WorkGroupID.xy), RTSM_LARGE_TILE);
  barrier();

  if(laneID<16) {
    const ivec2 at = ivec2(gl_WorkGroupID.xy)*4 + ivec2(laneID%4, laneID/4);
    imageStore(tileSmp, at, uvec4(numSlices[laneID+1]));
    }

  if(numSlices[0]==0) {
    storeEmptyList();
    return;
    }

  traceMeshlets(1, pos.data[0]);
  return;

  // debug
  barrier();
  for(int i=0; i<16; ++i) {
    ivec2 at = ivec2(gl_WorkGroupID.xy)*4 + ivec2(i%4, i/4);
    imageStore(tileBins, at, uvec4(numMeshletsGlob));
    }
  }
