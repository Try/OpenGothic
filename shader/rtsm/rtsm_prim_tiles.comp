#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

layout(local_size_x = 32, local_size_y = 32) in; //fixme: too big wg

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  vec3  originLwc;
  float znear;
  } push;
layout(binding = 0)         uniform  utexture2D lightTiles;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430)          buffer Pos { uint  alloc; uint    data[]; } pos;
layout(binding = 5, std430) readonly buffer Lbo { LightSource lights[];        };
layout(binding = 6, std430) readonly buffer VId { uvec4 count; LightId data[]; } vLights;
layout(binding = 7)         uniform  utexture2D meshBinsOmni;
layout(binding = 8, rg32ui) uniform  uimage2D   primTiles;

#if defined(DEBUG_IMG)
layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;
#endif

void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#include "rtsm/rtsm_scratch.glsl"

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);

uvec2 pullTileData() {
  return texelFetch(lightTiles, ivec2((gl_WorkGroupID.xy*RTSM_SMALL_TILE)/RTSM_LIGHT_TILE), 0).xy;
  }

vec3 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  const vec4 wpos      = scene.viewProjectLwcInv * scr;
  return wpos.xyz/wpos.w;
  }

float lightIntensity(const vec3 normal, const float distance, const vec3 ldir, const float lrange) {
  const float distanceSquare = (distance * distance);
  const float factor         = distanceSquare / (lrange * lrange);
  const float smoothFactor   = max(1.0 - factor * factor, 0.0);
  if(factor>1.0)
    return 0;

  float lambert = max(0.0,-dot(ldir,normal));
  float lx      = (lambert/max(factor, 0.05)) * (smoothFactor*smoothFactor);
  return lx * Fd_Lambert * 0.1;
  }

shared uint  cubeFaces;
shared uvec4 bbox[6];
void rayBboxses(const vec3 ray, bool activeRay) {
  const uint laneID = gl_LocalInvocationIndex;

  cubeFaces = 0;
  if(laneID<bbox.length())
    bbox[laneID] = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  barrier();

  const uint face = rayToFace(ray);
  if(activeRay)
    atomicOr(cubeFaces, 1u<<face);
  barrier();

  if(activeRay) {
    const uint id = face;
    const vec3 rf = rayToFace(ray, face);
    atomicMin(bbox[id].x, floatToOrderedUint(rf.x));
    atomicMin(bbox[id].y, floatToOrderedUint(rf.y));
    atomicMax(bbox[id].z, floatToOrderedUint(rf.x));
    atomicMax(bbox[id].w, floatToOrderedUint(rf.y));
    }
  barrier();

  if(laneID<bbox.length() && (cubeFaces & (1 << laneID))!=0) {
    uvec4 aabb = bbox[laneID];
    if(aabb.x==aabb.z || aabb.y==aabb.w) {
      // degenerated bbox
      atomicAnd(cubeFaces, ~(1 << laneID));
      } else {
      bbox[laneID] = floatBitsToUint(orderedUintToFloat(aabb));
      }
    }
  }

bool isPrimitiveVisible(const vec3 origin, const vec4 sphere, uint face) {
  const vec4 aabb = uintBitsToFloat(bbox[face]);
  const vec3 fa = faceToRay(vec2(aabb.xy), face);
  const vec3 fb = faceToRay(vec2(aabb.zy), face);
  const vec3 fc = faceToRay(vec2(aabb.zw), face);
  const vec3 fd = faceToRay(vec2(aabb.xw), face);

  const vec3 p0 = cross(fa, fb);
  const vec3 p1 = cross(fb, fc);
  const vec3 p2 = cross(fc, fd);
  const vec3 p3 = cross(fd, fa);
  const float R = sphere.w;

  if(dot(sphere.xyz, p0) < -R)
    return false;
  if(dot(sphere.xyz, p1) < -R)
    return false;
  if(dot(sphere.xyz, p2) < -R)
    return false;
  if(dot(sphere.xyz, p3) < -R)
    return false;
  return true;
  }

bool isPrimitiveVisible(const vec3 origin, vec4 sphere) {
  sphere.xyz -= origin;

  for(uint face=0; face<bbox.length(); ++face) {
    if((cubeFaces & (1u << face))==0)
      continue;
    if(isPrimitiveVisible(origin, sphere, face))
      return true;
    }
  return false;
  }

shared uint numLights;
shared uint dbgMeshlets;
void processLight(const vec3 wpos, const vec3 normal, const LightId lId, const uint numMeshlets) {
  const uint laneID = gl_LocalInvocationIndex;

  const LightSource src      = lights[lId.id];
  const uint        tilePtr  = lId.ptr;
  const vec3        distance = wpos-src.pos;

  const float       tMax     = length(distance);
  const vec3        ldir     = distance/tMax;
  float             lpow     = lightIntensity(normal, tMax, ldir, src.range);

  rayBboxses(ldir, lpow>0);
  barrier();

  if(cubeFaces==0)
    return;

  if(laneID==0)
    atomicAdd(numLights, 1);

  for(uint i=laneID; i<numMeshlets; i+=NumThreads) {
    const uint ptr    = pos.data[tilePtr + i];
    const vec4 sphere = pullMeshSphere(ptr);
    if(!isPrimitiveVisible(src.pos, sphere))
      continue;
    atomicAdd(dbgMeshlets, 1);
    }
  }

void main() {
  const uvec2 tile    = pullTileData();
  const uint  lptr    = tile.x;
  const uint  nLights = tile.y;
  if(nLights==0) {
    imageDbg(0);
    return;
    }

  dbgMeshlets = 0;
  numLights = 0;
  barrier();

  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;

  const vec3  origin = worldPos(fragCoord.xy, z) + (normal*NormalBias) + push.originLwc;

  for(uint i=0; i<nLights; ++i) {
    const uint id          = pos.data[lptr + i];
    const uint numMeshlets = texelFetch(meshBinsOmni, ivec2(id,0), 0).x;
    processLight(origin, normal, vLights.data[id], numMeshlets);
    barrier();
    }

  //imageDbg(numLights);
  imageDbg(dbgMeshlets);
  }
