#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

#define TRANSLUCENCY 1

layout(local_size_x = 32, local_size_y = 32) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  vec3  originLwc;
  } push;
layout(binding = 0, r11f_g11f_b10f) uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Pos { uint  alloc; uint    data[]; } pos;
layout(binding = 5, std430) readonly buffer Lbo { LightSource lights[];        };
layout(binding = 6, std430) readonly buffer VId { uvec4 count; LightId data[]; } vLights;
layout(binding = 7)         uniform  utexture2D primBinsOmni;

layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;

void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#define CONST_SCRATCH 1
#include "rtsm/rtsm_scratch.glsl"

const float minOpacity = 0.49/255.0;

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
vec3  light     = vec3(0);

uint primCnt = 0; //counter

vec3 rayTriangleTest(const vec3 origin, const vec3 raydir, const vec3 v0, const vec3 v1, const vec3 v2) {
  const vec3  e1    = v1 - v0;
  const vec3  e2    = v2 - v0;
  const vec3  s1    = cross(raydir, e2);
  const float denom = dot(s1, e1);

  if(denom <= 0.0)
    return vec3(-1);

  const float invDemom = 1.0 / denom;
  const vec3  d        = origin - v0;
  const vec3  s2       = cross(d, e1);

  const float u = dot(d,      s1) * invDemom;
  const float v = dot(raydir, s2) * invDemom;

  if(( u < 0.0f ) || ( u > 1.0f ) || ( v < 0.0f ) || ( u + v > 1.0f )) {
    return vec3(-1);
    }

  float t0 = dot(e2, s2) * invDemom;
  return vec3(t0, u, v);
  }

float lightIntensity(const vec3 normal, const float distance, const vec3 ldir, const float lrange) {
  const float distanceSquare = (distance * distance);
  const float factor         = distanceSquare / (lrange * lrange);
  const float smoothFactor   = max(1.0 - factor * factor, 0.0);
  if(factor>1.0)
    return 0;

  float lambert = max(0.0,-dot(ldir,normal));
  float lx      = (lambert/max(factor, 0.05)) * (smoothFactor*smoothFactor);
  return lx * Fd_Lambert * 0.1;
  }

uint rayToFace(vec3 d) {
  const vec3 ad = abs(d);
  if(ad.x > ad.y && ad.x > ad.z)
    return d.x>=0 ? 0 : 1;
  if(ad.y > ad.x && ad.y > ad.z)
    return d.y>=0 ? 2 : 3;
  if(ad.z > ad.x && ad.z > ad.y)
    return d.z>=0 ? 4 : 5;
  return 0;
  }

vec3 rayToFace(vec3 pos, uint face) {
  // cubemap-face
  switch(face) {
    case 0: pos = vec3(pos.yz, +pos.x); break;
    case 1: pos = vec3(pos.zy, -pos.x); break;
    case 2: pos = vec3(pos.zx, +pos.y); break;
    case 3: pos = vec3(pos.xz, -pos.y); break;
    case 4: pos = vec3(pos.xy, +pos.z); break;
    case 5: pos = vec3(pos.yx, -pos.z); break;
    }
  pos.xy /= pos.z;
  return pos;
  }

vec3 faceToRay(vec2 xy, uint face) {
  //vec3 pos = vec3(xy, sqrt(1.0 - dot(xy, xy)));
  vec3 pos = normalize(vec3(xy, 1.0));
  switch(face) {
    case 0: pos = vec3(+pos.z, pos.xy); break;
    case 1: pos = vec3(-pos.z, pos.yx); break;
    case 2: pos = vec3(pos.y, +pos.z, pos.x); break;
    case 3: pos = vec3(pos.x, -pos.z, pos.y); break;
    case 4: pos = vec3(pos.xy, +pos.z); break;
    case 5: pos = vec3(pos.yx, -pos.z); break;
    }
  return pos;
  }

shared uint  cubeFaces;
shared uvec4 bbox[6];
void rayBboxses(const vec3 ray, bool activeRay) {
  const uint  laneID = gl_LocalInvocationIndex;

  cubeFaces = 0;
  if(laneID<bbox.length())
    bbox[laneID] = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  barrier();

  const uint face = rayToFace(ray);
  if(activeRay)
    atomicOr(cubeFaces, 1u<<face);
  barrier();

  if(activeRay) {
    const uint id = face;
    const vec3 rf = rayToFace(ray, face);
#if 1
    atomicMin(bbox[id].x, floatToOrderedUint(rf.x));
    atomicMin(bbox[id].y, floatToOrderedUint(rf.y));
    atomicMax(bbox[id].z, floatToOrderedUint(rf.x));
    atomicMax(bbox[id].w, floatToOrderedUint(rf.y));
#else
    atomicMin(bbox[id].x, floatToOrderedUint(-1));
    atomicMin(bbox[id].y, floatToOrderedUint(-1));
    atomicMax(bbox[id].z, floatToOrderedUint(+1));
    atomicMax(bbox[id].w, floatToOrderedUint(+1));
#endif
    }
  barrier();

  if(laneID<bbox.length() && (cubeFaces & (1 << laneID))!=0)
    bbox[laneID] = floatBitsToUint(orderedUintToFloat(bbox[laneID]));
  }

vec4 rayTriangleIntersect(const vec3 origin, const vec3 raydir, const vec3 v0, const vec3 v1, const vec3 v2) {
  const vec3  e1    = v1 - v0;
  const vec3  e2    = v2 - v0;
  const vec3  s1    = cross(raydir, e2);
  const float denom = dot(s1, e1);

  if(denom < 0.0)
    return vec4(-1);

  if(abs(denom) < 0.00001)
    return vec4(0); // This ray is parallel to this triangle.

  const float invDemom = 1.0 / denom;
  const vec3  d        = origin - v0;
  const vec3  s2       = cross(d, e1);

  const float u = dot(d,      s1) * invDemom;
  const float v = dot(raydir, s2) * invDemom;

  float t0 = dot(e2, s2) * invDemom;
  return vec4(t0, u, v, denom);
  }

bool isPrimitiveVisible(const vec3 origin, vec3 a, vec3 b, vec3 c, uint face) {
  a -= origin;
  b -= origin;
  c -= origin;

  const vec4 aabb = uintBitsToFloat(bbox[face]);
  const vec3 fa = faceToRay(vec2(aabb.xy), face);
  const vec3 fb = faceToRay(vec2(aabb.zy), face);
  const vec3 fc = faceToRay(vec2(aabb.zw), face);
  const vec3 fd = faceToRay(vec2(aabb.xw), face);

  const vec3 p0 = cross(fa, fb);
  const vec3 p1 = cross(fb, fc);
  const vec3 p2 = cross(fc, fd);
  const vec3 p3 = cross(fd, fa);

  if(dot(a, p0)<0 && dot(b, p0)<0 && dot(c, p0)<0)
    return false;
  if(dot(a, p1)<0 && dot(b, p1)<0 && dot(c, p1)<0)
    return false;
  if(dot(a, p2)<0 && dot(b, p2)<0 && dot(c, p2)<0)
    return false;
  if(dot(a, p3)<0 && dot(b, p3)<0 && dot(c, p3)<0)
    return false;

  return true;
  }

bool isPrimitiveVisible(const vec3 origin, vec3 a, vec3 b, vec3 c) {
  for(uint face=0; face<bbox.length(); ++face) {
    if((cubeFaces & (1u << face))==0)
      continue;
    if(isPrimitiveVisible(origin, a, b, c, face))
      return true;
    }
  return false;
  }

const  uint  MaxChunk = NumThreads/2;
shared vec3  meshVertices   [MaxChunk*3];
shared uint  meshVertexUV   [MaxChunk*3];
shared uint  primitiveBucket[MaxChunk];
shared uint  numLocalPrim;

void pullPrimitives(const vec3 origin, const uint pkg) {
  const uint  laneID = gl_LocalInvocationIndex;

  const uint  ptr  = (pkg >> 8);
  const uint  pId  = pkg & 0xFF;
  const uvec4 tri  = pullPrimitiveFull(ptr+MeshletHeaderSize, pId);
  const uint  ptrV = ptr + MeshletHeaderSize + MaxPrim;

  //FIXME: register pressure
  const vec3 a = pullVertex(ptrV, tri.x);
  const vec3 b = pullVertex(ptrV, tri.y);
  const vec3 c = pullVertex(ptrV, tri.z);

  if(!isPrimitiveVisible(origin,a,b,c))
    return;

  const uint  id       = atomicAdd(numLocalPrim, 1);
  primitiveBucket[id]  = packUint2x16(uvec2(tri.w, pullMeshBucketId(ptr)));

  meshVertices[id*3+0] = a;
  meshVertices[id*3+1] = b;
  meshVertices[id*3+2] = c;

  meshVertexUV[id*3+0] = pullVertexUV(ptrV, tri.x);
  meshVertexUV[id*3+1] = pullVertexUV(ptrV, tri.y);
  meshVertexUV[id*3+2] = pullVertexUV(ptrV, tri.z);
  }

shared uint inactiveRays;
float rasterBatch(const vec3 origin, const vec3 dir, const float tMax, float opacity) {
  const float tMin = 15;

  const uint laneID = gl_LocalInvocationIndex;
  if(opacity<=minOpacity)
    return opacity;

  for(uint id=0; id<numLocalPrim; ++id) {
    const vec3  a = meshVertices[id*3+0];
    const vec3  b = meshVertices[id*3+1];
    const vec3  c = meshVertices[id*3+2];
    const float t = rayTriangleTest(origin, dir, a, b, c).x;
    if(!(tMin<t && t<tMax))
      continue;
    opacity = 0;
    break;
    }

  return opacity;
  }

bool earlyOut() {
  return inactiveRays==NumThreads;
  }

float tracePacket(const uvec2 tileHeader, const vec3 origin, const vec3 dir, const float tMax, float opacity) {
  const uint  laneID        = gl_LocalInvocationIndex;
  const uint  numPrimitives = tileHeader.y & 0xFFFF;
  const uint  steps         = (numPrimitives + MaxChunk - 1)/MaxChunk;

  inactiveRays = 0;
  rayBboxses(dir, opacity>0);
  barrier();

  if(cubeFaces==0)
    return opacity;

  if(opacity<=minOpacity)
    atomicAdd(inactiveRays, 1);
  barrier();

  for(uint s=0; s<numPrimitives; s+=MaxChunk) {
    if(earlyOut())
      break;

    numLocalPrim = 0;
    barrier();

    const uint i = s + laneID;
    if(i<numPrimitives && laneID<MaxChunk) {
      const uint ptr  = pos.data[tileHeader.x + i];
      pullPrimitives(origin, ptr);
      }
    barrier();

    primCnt += numLocalPrim;
    opacity = rasterBatch(origin, dir, tMax, opacity);
    barrier();
    }

  // primCnt = visBits;

  if(opacity<=minOpacity)
    return 0;
  return opacity;
  }

void processLight(const vec3 wpos, const vec3 normal, const LightId lId, const uint numMeshlets) {
  const LightSource src      = lights[lId.id];
  const uint        tilePtr  = lId.ptr;
  const vec3        distance = wpos-src.pos;

  const float       tMax     = length(distance);
  const vec3        ldir     = distance/tMax;
  float             lpow     = lightIntensity(normal, tMax, ldir, src.range);

  lpow = tracePacket(uvec2(tilePtr, numMeshlets), src.pos, ldir, tMax-1, lpow);

  const uint face = rayToFace(ldir);
  if(false) {
    //light = lpow * debugColors[ldir.y>0 ? 2 : 1];
    light = lpow * debugColors[face];
    return;
    }

  light += vec3(lpow * src.color);
  }

vec3 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  const vec4 wpos      = scene.viewProjectLwcInv * scr;
  return wpos.xyz/wpos.w;
  }

void main() {
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;

  const vec3  origin = worldPos(fragCoord.xy, z) + (normal*NormalBias) + push.originLwc;

  if(vLights.count.x>0) {
    //TODO: many lights
    const uint numMeshlets = texelFetch(primBinsOmni, ivec2(0,0), 0).x;
    processLight(origin, normal, vLights.data[0], numMeshlets);
    }

  if(valid)
    imageStore(outputImage, ivec2(fragCoord), vec4(light, 1));
  imageDbg(primCnt);
  }
