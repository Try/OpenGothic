#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

#define TRANSLUCENCY 1

layout(local_size_x = 16, local_size_y = 16) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  vec3  originLwc;
  } push;
layout(binding = 0, r11f_g11f_b10f) uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Pos { uint  alloc; uint    data[]; } pos;
layout(binding = 5, std430) readonly buffer Lbo { LightSource lights[];        };
layout(binding = 6, std430) readonly buffer VId { uvec4 count; LightId data[]; } vLights;
layout(binding = 7)         uniform  utexture2D meshBinsOmni;

#define CONST_SCRATCH 1
#include "rtsm/rtsm_scratch.glsl"

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
vec3  light     = vec3(0);

float raySphereTest(const vec3 origin, const vec3 dir, const vec4 sphere) {
  float R  = sphere.w;
  vec3  oc = sphere.xyz - origin;
  float a  = dot(dir, dir);
  float h  = dot(dir, oc);
  float c  = dot(oc, oc) - R*R;

  if(c < 0)
    return 0; // inside

  //return -1;

  float discriminant = h*h - a*c;
  if(discriminant < 0)
    return -1.0;
  return (h - sqrt(discriminant)) / a;
  }

vec3 rayTriangleTest(const vec3 origin, const vec3 raydir, const vec3 v0, const vec3 v1, const vec3 v2) {
  const vec3  e1    = v1 - v0;
  const vec3  e2    = v2 - v0;
  const vec3  s1    = cross(raydir, e2 );
  const float denom = dot( s1, e1 );

  if(denom <= 0.0)
    return vec3(-1);    // This ray is parallel to this triangle.

  const float invDemom = 1.0 / denom;
  const vec3  d = origin - v0;
  vec2  b;
  b.x = dot( d, s1 ) * invDemom;

  vec3 s2 = cross( d, e1 );
  b.y     = dot(raydir, s2 ) * invDemom;

  float t0 = dot(e2, s2) * invDemom;

  if(( b.x < 0.0f ) || ( b.x > 1.0f ) || ( b.y < 0.0f ) || ( b.x + b.y > 1.0f )) {
    return vec3(-1);
    }

  return vec3(t0, b);
  }

shared uint  primitiveCnt;
shared uvec4 primitiveIds[MaxPrim];
shared vec3  meshVertices[MaxVert];

void pullMeshlet(uint ptrM) {
  const uint laneID  = gl_LocalInvocationIndex;
  const uint primCnt = pullPrimitiveCount(ptrM);
  const uint vertCnt = pos.data[ptrM+4];

  if(laneID == 0)
    primitiveCnt = primCnt;

  ptrM += MeshletHeaderSize;
  if(laneID < primCnt)
    primitiveIds[laneID] = pullPrimitiveFull(ptrM, laneID);

  ptrM += MaxPrim;
  if(laneID < vertCnt)
    meshVertices[laneID] = pullVertex(ptrM, laneID);
  }

bool rayMeshletTest(const vec3 origin, const vec3 dir, const float tMax) {
  const float tMin = 15;
  for(uint i=0; i<primitiveCnt; ++i) {
    const uvec3 prim = primitiveIds[i].xyz;
    const vec3  t    = rayTriangleTest(origin, dir, meshVertices[prim.x], meshVertices[prim.y], meshVertices[prim.z]);
    if(tMin<t.x && t.x<tMax)
      return true;
    }
  return false;
  }

float lightIntensity(const vec3 normal, const float distance, const vec3 ldir, const float lrange) {
  const float distanceSquare = (distance * distance);
  const float factor         = distanceSquare / (lrange * lrange);
  const float smoothFactor   = max(1.0 - factor * factor, 0.0);
  if(factor>1.0)
    return 0;

  float lambert = max(0.0,-dot(ldir,normal));
  float lx      = (lambert/max(factor, 0.05)) * (smoothFactor*smoothFactor);
  return lx * Fd_Lambert * 0.1;
  }

void processLight(const vec3 origin, const vec3 normal, const LightId lId, const uint numMeshlets) {
  const LightSource src      = lights[lId.id];
  const uint        tilePtr  = lId.ptr;
  const vec3        distance = origin-src.pos;

  const float       tMax     = length(distance);
  const vec3        ldir     = distance/tMax;
  const float       lpow     = lightIntensity(normal, tMax, ldir, src.range);

  bool shadow = (lpow<=0.0);
#if 1
  // const uint numMeshlets = texelFetch(tileBins, ivec2(lId.id), 0);
  for(uint i=0; i<numMeshlets; ++i) {
    const uint ptr = pos.data[tilePtr+i];
    const vec4 sp  = pullMeshSphere(ptr);

    pullMeshlet(ptr);
    barrier();

    if(!shadow) {
      float tCluster    = raySphereTest(src.pos, ldir, sp);
      bool  skipCluster = !(0<=tCluster && tCluster<tMax);
      if(!skipCluster)
        shadow = rayMeshletTest(src.pos, ldir, tMax-1);
      }
    barrier();
    }
#endif
  if(shadow)
    return;
  light += vec3(lpow * src.color);
  }

vec3 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  const vec4 wpos      = scene.viewProjectLwcInv * scr;
  return wpos.xyz/wpos.w;
  }

void main() {
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;

  const vec3  origin = worldPos(fragCoord.xy, z) + (normal*NormalBias) + push.originLwc;

  if(vLights.count.x>0) {
    //TODO: many lights
    const uint numMeshlets = texelFetch(meshBinsOmni, ivec2(0,0), 0).x;
    processLight(origin, normal, vLights.data[0], numMeshlets);
    }

  if(valid)
    imageStore(outputImage, ivec2(fragCoord), vec4(light, 1));
  }
