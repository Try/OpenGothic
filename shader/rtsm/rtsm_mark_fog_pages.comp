#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable

#include "epipolar/epipolar_common.glsl"
#include "rtsm/rtsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 128) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0, r16)    uniform image2D rayData;
layout(binding = 1, std140) uniform UboScene { SceneDesc scene; };
layout(binding = 2, std430) readonly buffer Ep0 { Epipole epipole[]; };
layout(binding = 3, r32ui)  uniform uimage3D pageTbl;

uint  NumSamples = imageSize(rayData).x;
uint  NumSlices  = imageSize(rayData).y;

shared uint pageHit[NumThreads];

int calcMipIndex(in vec2 shPos) {
  float d  = max(abs(shPos.x), abs(shPos.y));
  uint  id = uint(d * RTSM_PAGE_MIPS);
  return clamp(findMSB(id)+1, 0, 8);
  }

void storeHiZValue(uint v) {
  uvec4 dx = unpack565_16(v);
  ivec3 at = ivec3(dx.xyz);
  uint  iz = (dx.w << 16);

  imageAtomicMin(pageTbl, at, iz);
  }

void clearCache() {
  const uint lane = gl_LocalInvocationIndex;
  pageHit[lane] = 0xFFFFFFFF;
  }

void flushCache() {
  const uint lane = gl_LocalInvocationIndex;
  const uint cur  = pageHit[lane];

  bool provoking = cur!=0xFFFFFFFF;
  if(lane>1) {
    uint other = pageHit[lane-1];
    if((other&0xFFFF0000)==(cur&0xFFFF0000)) {
      provoking = (other&0x0000FFFF) <= (cur&0x0000FFFF);
      }
    }
  if(lane+1<pageHit.length()) {
    uint other = pageHit[lane+1];
    if((other&0xFFFF0000)==(cur&0xFFFF0000)) {
      provoking = (other&0x0000FFFF) <  (cur&0x0000FFFF);
      }
    }
  barrier();

  if(provoking)
    storeHiZValue(cur);
  }

void markPage(vec3 shPos0) {
  int   mip    = calcMipIndex(shPos0.xy);
  vec2  page   = shPos0.xy / (1 << mip);
  if(any(greaterThan(abs(page), vec2(1))))
    return;

  ivec2 pageI = ivec2((page*0.5+0.5)*RTSM_PAGE_TBL_SIZE);
  ivec3 at    = ivec3(pageI, mip);
  float z     = shPos0.z;

  pageHit[gl_LocalInvocationIndex] = pack565_16(at, floatBitsToUint(z) >> 16);
  }

void innerMain() {
  const uint i       = gl_GlobalInvocationID.x;
  const uint sliceId = gl_GlobalInvocationID.y;

  if(i>=NumSamples)
    return;

  vec2  rayOrig = epipole[sliceId].rayOrig;
  vec2  rayDir  = epipole[sliceId].rayDir;
  float tMin    = epipole[sliceId].tMin;
  float tMax    = epipole[sliceId].tMax;
  float dBegin  = epipole[sliceId].dBegin;
  float dEnd    = epipole[sliceId].dEnd;

  const float a     = (i+0.5)/float(NumSamples);
  const float t     = tMin    + a*(tMax-tMin);
  const float depth = min(dBegin, dEnd);
  const vec2  shPos = rayOrig + t*rayDir;

  markPage(vec3(shPos,depth));
  }

void main() {
  clearCache();
  barrier();

  innerMain();
  barrier();

  flushCache();
  }
