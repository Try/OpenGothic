#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

layout(local_size_x = 32) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;
const uint sizeof_Light = 1 + 4*6;

layout(push_constant, std430) uniform UboPush {
  vec3  originLwc;
  float znear;
  } push;
layout(binding = 0, rg32ui) uniform  uimage2D   lightTiles;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430)          buffer Pos { uint  alloc; uint    data[]; } pos;
layout(binding = 5, std430) readonly buffer Lbo { LightSource lights[];        };

#if defined(DEBUG_IMG)
layout(binding = 9, r32ui)  uniform  uimage2D   dbgImage;
#endif

shared uint dbgCounter;
void imageDbg(uint info) {
#if defined(DEBUG_IMG)
  imageStore(dbgImage, ivec2(gl_WorkGroupID.xy), uvec4(info));
#endif
  }

#include "rtsm/rtsm_scratch.glsl"

shared uint numLights;

struct Light {
  uint  id;
  uvec4 iaabb[6];
  };

uvec2 pullTileData() {
  return imageLoad(lightTiles, ivec2(gl_WorkGroupID.xy)).xy;
  }

void storeBin(ivec2 at, uint ptr, uint num) {
  if(gl_LocalInvocationIndex!=0)
    return;
  if(num==0)
    ptr = NULL;
  imageStore(lightTiles, at, uvec4(ptr,num,0,0));
  }

bool isDegenerated(const Light light) {
  //return false;
  for(uint i=0; i<6; ++i) {
    uvec4 iaabb = light.iaabb[i];
    if(iaabb.x>=iaabb.z || iaabb.y>=iaabb.w) {
      // degenerated bbox
      continue;
      }
    return false;
    }
  return true;
  }

void storeLight(uint ptr, const Light light) {
  pos.data[ptr+0] = light.id;
  for(uint i=0; i<6; ++i) {
    uvec4 iaabb = light.iaabb[i];
    pos.data[ptr+1] = iaabb.x;
    pos.data[ptr+2] = iaabb.y;
    pos.data[ptr+3] = iaabb.z;
    pos.data[ptr+4] = iaabb.w;
    ptr+=4;
    }
  }

void loadLight(uint ptr, out Light light) {
  light.id = pos.data[ptr+0];
  for(uint i=0; i<6; ++i) {
    light.iaabb[i].x = pos.data[ptr+1];
    light.iaabb[i].y = pos.data[ptr+2];
    light.iaabb[i].z = pos.data[ptr+3];
    light.iaabb[i].w = pos.data[ptr+4];
    ptr+=4;
    }
  }

void processFilering(const uint lptr, const uint nLights) {
  const uint laneID = gl_LocalInvocationIndex;
  const uint steps  = (nLights + NumThreads - 1)/NumThreads;

  for(uint s=0; s<steps; ++s) {
    const uint i = s*NumThreads + laneID;

    uint  id = 0xFFFFFFFF;
    Light light;
    if(i<nLights)
      loadLight(lptr + i*sizeof_Light, light);
    barrier();

    if(i<nLights && !isDegenerated(light)) {
      const uint id = atomicAdd(numLights, 1);
      storeLight(lptr + id*sizeof_Light, light);
      }
    barrier();
    }
  }

void main() {
  const uvec2 tile    = pullTileData();
  const uint  lptr    = tile.x;
  const uint  nLights = tile.y;

  if(nLights==0) {
    storeBin(ivec2(gl_WorkGroupID.xy), NULL, 0);
    imageDbg(0);
    return;
    }

  dbgCounter = 0;
  numLights  = 0;
  barrier();

  processFilering(lptr, nLights);
  barrier();

  storeBin(ivec2(gl_WorkGroupID.xy), lptr, numLights);
  imageDbg(numLights);
  }
